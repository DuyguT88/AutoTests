<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 5.0.1 (Python 3.10.6 on win32)" generated="20220905 14:27:39.082" rpa="false" schemaversion="3">
<suite id="s1" name="TestSuites" source="C:\PythonInterviewProject\TestSuites">
<suite id="s1-s1" name="API Tests" source="C:\PythonInterviewProject\TestSuites\API_Tests">
<suite id="s1-s1-s1" name="TS001 API User" source="C:\PythonInterviewProject\TestSuites\API_Tests\TS001_API_User.robot">
<test id="s1-s1-s1-t1" name="API_TS001_Test_1: Add an user" line="22">
<kw name="User Logout" library="UserKeywords" type="SETUP">
<kw name="GET" library="RequestsLibrary">
<arg>url=${API_URL}/user/logout</arg>
<arg>expected_status=200</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:27.134" level="INFO">GET Request : url=https://petstore.swagger.io/v2/user/logout 
 path_url=/v2/user/logout 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220905 14:27:27.134" level="INFO">GET Response : url=https://petstore.swagger.io/v2/user/logout 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:28 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"ok"} 
 </msg>
<status status="PASS" starttime="20220905 14:27:26.727" endtime="20220905 14:27:27.135"/>
</kw>
<status status="PASS" starttime="20220905 14:27:26.726" endtime="20220905 14:27:27.135"/>
</kw>
<kw name="Given User Logins" library="UserKeywords">
<arg>user=${login_user}</arg>
<arg>passwd=${login_passwd}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{authorization}</var>
<arg>username=${user}</arg>
<arg>password=${passwd}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220905 14:27:27.137" level="INFO">&amp;{authorization} = { username=adminUser | password=986/*#^$&amp; }</msg>
<status status="PASS" starttime="20220905 14:27:27.136" endtime="20220905 14:27:27.137"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<var>${login_response}</var>
<arg>url=${API_URL}/user/login</arg>
<arg>json=${authorization}</arg>
<arg>expected_status=anything</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:27.531" level="INFO">GET Request : url=https://petstore.swagger.io/v2/user/login 
 path_url=/v2/user/login 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '50', 'Content-Type': 'application/json'} 
 body=b'{"username": "adminUser", "password": "986/*#^$&amp;"}' 
 </msg>
<msg timestamp="20220905 14:27:27.531" level="INFO">GET Response : url=https://petstore.swagger.io/v2/user/login 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:28 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'close', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'X-Expires-After': 'Mon Sep 05 13:27:28 UTC 2022', 'X-Rate-Limit': '5000', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"logged in user session:1662380848474"} 
 </msg>
<msg timestamp="20220905 14:27:27.531" level="INFO">${login_response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:27.137" endtime="20220905 14:27:27.531"/>
</kw>
<if>
<branch type="IF" condition="&quot;${user}&quot; != &quot;${EMPTY}&quot; and &quot;${passwd}&quot; != &quot;${EMPTY}&quot;">
<kw name="Status Should Be" library="RequestsLibrary">
<arg>200</arg>
<arg>${login_response}</arg>
<doc>Fails if response status code is different than the expected.</doc>
<status status="PASS" starttime="20220905 14:27:27.536" endtime="20220905 14:27:27.536"/>
</kw>
<status status="PASS" starttime="20220905 14:27:27.535" endtime="20220905 14:27:27.536"/>
</branch>
<branch type="ELSE">
<kw name="Fail" library="BuiltIn">
<arg>message=Invalid login</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220905 14:27:27.537" endtime="20220905 14:27:27.537"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:27.536" endtime="20220905 14:27:27.537"/>
</branch>
<status status="PASS" starttime="20220905 14:27:27.532" endtime="20220905 14:27:27.537"/>
</if>
<status status="PASS" starttime="20220905 14:27:27.135" endtime="20220905 14:27:27.537"/>
</kw>
<kw name="And Get reference json" library="Validate_json">
<var>${create_req_body}</var>
<arg>reference_schema_path=${GLOBAL_SCHEMA_SEND_ADD_USER}</arg>
<msg timestamp="20220905 14:27:27.538" level="INFO">{'id': 1553, 'username': 'Leo', 'firstName': 'Daniel', 'lastName': 'Dark', 'email': 'test@hotmail.com', 'password': 'f56%&amp;*', 'phone': '480462046', 'userStatus': 6}</msg>
<msg timestamp="20220905 14:27:27.538" level="INFO">${create_req_body} = {'id': 1553, 'username': 'Leo', 'firstName': 'Daniel', 'lastName': 'Dark', 'email': 'test@hotmail.com', 'password': 'f56%&amp;*', 'phone': '480462046', 'userStatus': 6}</msg>
<status status="PASS" starttime="20220905 14:27:27.537" endtime="20220905 14:27:27.538"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${create_req_body}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220905 14:27:27.539" level="INFO">${create_req_body} = {'id': 1553, 'username': 'Leo', 'firstName': 'Daniel', 'lastName': 'Dark', 'email': 'test@hotmail.com', 'password': 'f56%&amp;*', 'phone': '480462046', 'userStatus': 6}</msg>
<status status="PASS" starttime="20220905 14:27:27.539" endtime="20220905 14:27:27.539"/>
</kw>
<kw name="When POST" library="RequestsLibrary">
<var>${post_response}</var>
<arg>url=${API_URL}/user</arg>
<arg>json=${create_req_body}</arg>
<arg>expected_status=200</arg>
<doc>Sends a POST request.</doc>
<msg timestamp="20220905 14:27:27.953" level="INFO">POST Request : url=https://petstore.swagger.io/v2/user 
 path_url=/v2/user 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '164', 'Content-Type': 'application/json'} 
 body=b'{"id": 1553, "username": "Leo", "firstName": "Daniel", "lastName": "Dark", "email": "test@hotmail.com", "password": "f56%&amp;*", "phone": "480462046", "userStatus": 6}' 
 </msg>
<msg timestamp="20220905 14:27:27.953" level="INFO">POST Response : url=https://petstore.swagger.io/v2/user 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:28 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"1553"} 
 </msg>
<msg timestamp="20220905 14:27:27.953" level="INFO">${post_response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:27.540" endtime="20220905 14:27:27.953"/>
</kw>
<kw name="Then Validate the response schema with reference schema" library="DataChecker">
<arg>input=${post_response.json()}</arg>
<arg>ref_path=${GLOBAL_SCHEMA_RESP_CREATE_USER}</arg>
<kw name="Get Reference Json" library="Validate_json">
<var>${ref}</var>
<arg>reference_schema_path=${ref_path}</arg>
<msg timestamp="20220905 14:27:27.956" level="INFO">{'code': 200, 'type': 'unknown', 'message': '1553'}</msg>
<msg timestamp="20220905 14:27:27.956" level="INFO">${ref} = {'code': 200, 'type': 'unknown', 'message': '1553'}</msg>
<status status="PASS" starttime="20220905 14:27:27.955" endtime="20220905 14:27:27.956"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${input}</arg>
<arg>${ref}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:27.957" endtime="20220905 14:27:27.957"/>
</kw>
<status status="PASS" starttime="20220905 14:27:27.953" endtime="20220905 14:27:27.958"/>
</kw>
<tag>API</tag>
<tag>API_USER</tag>
<status status="PASS" starttime="20220905 14:27:26.725" endtime="20220905 14:27:27.958"/>
</test>
<test id="s1-s1-s1-t2" name="API_TS001_Test_2: Update the lastname and phone of the user" line="29">
<kw name="User Logout" library="UserKeywords" type="SETUP">
<kw name="GET" library="RequestsLibrary">
<arg>url=${API_URL}/user/logout</arg>
<arg>expected_status=200</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:28.396" level="INFO">GET Request : url=https://petstore.swagger.io/v2/user/logout 
 path_url=/v2/user/logout 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220905 14:27:28.396" level="INFO">GET Response : url=https://petstore.swagger.io/v2/user/logout 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:29 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"ok"} 
 </msg>
<status status="PASS" starttime="20220905 14:27:27.960" endtime="20220905 14:27:28.396"/>
</kw>
<status status="PASS" starttime="20220905 14:27:27.959" endtime="20220905 14:27:28.396"/>
</kw>
<kw name="Given User Logins" library="UserKeywords">
<arg>user=${login_user}</arg>
<arg>passwd=${login_passwd}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{authorization}</var>
<arg>username=${user}</arg>
<arg>password=${passwd}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220905 14:27:28.398" level="INFO">&amp;{authorization} = { username=adminUser | password=986/*#^$&amp; }</msg>
<status status="PASS" starttime="20220905 14:27:28.397" endtime="20220905 14:27:28.399"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<var>${login_response}</var>
<arg>url=${API_URL}/user/login</arg>
<arg>json=${authorization}</arg>
<arg>expected_status=anything</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:28.858" level="INFO">GET Request : url=https://petstore.swagger.io/v2/user/login 
 path_url=/v2/user/login 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '50', 'Content-Type': 'application/json'} 
 body=b'{"username": "adminUser", "password": "986/*#^$&amp;"}' 
 </msg>
<msg timestamp="20220905 14:27:28.858" level="INFO">GET Response : url=https://petstore.swagger.io/v2/user/login 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:29 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'close', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'X-Expires-After': 'Mon Sep 05 13:27:29 UTC 2022', 'X-Rate-Limit': '5000', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"logged in user session:1662380849795"} 
 </msg>
<msg timestamp="20220905 14:27:28.859" level="INFO">${login_response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:28.399" endtime="20220905 14:27:28.859"/>
</kw>
<if>
<branch type="IF" condition="&quot;${user}&quot; != &quot;${EMPTY}&quot; and &quot;${passwd}&quot; != &quot;${EMPTY}&quot;">
<kw name="Status Should Be" library="RequestsLibrary">
<arg>200</arg>
<arg>${login_response}</arg>
<doc>Fails if response status code is different than the expected.</doc>
<status status="PASS" starttime="20220905 14:27:28.861" endtime="20220905 14:27:28.861"/>
</kw>
<status status="PASS" starttime="20220905 14:27:28.860" endtime="20220905 14:27:28.861"/>
</branch>
<branch type="ELSE">
<kw name="Fail" library="BuiltIn">
<arg>message=Invalid login</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220905 14:27:28.862" endtime="20220905 14:27:28.862"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:28.862" endtime="20220905 14:27:28.862"/>
</branch>
<status status="PASS" starttime="20220905 14:27:28.859" endtime="20220905 14:27:28.863"/>
</if>
<status status="PASS" starttime="20220905 14:27:28.396" endtime="20220905 14:27:28.863"/>
</kw>
<kw name="And Get From Dictionary" library="Collections">
<var>${username}</var>
<arg>${create_req_body}</arg>
<arg>key=username</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20220905 14:27:28.863" level="INFO">${username} = Leo</msg>
<status status="PASS" starttime="20220905 14:27:28.863" endtime="20220905 14:27:28.864"/>
</kw>
<kw name="And Set Global Variable" library="BuiltIn">
<arg>${username}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220905 14:27:28.864" level="INFO">${username} = Leo</msg>
<status status="PASS" starttime="20220905 14:27:28.864" endtime="20220905 14:27:28.864"/>
</kw>
<kw name="And Set To Dictionary" library="Collections">
<arg>dictionary=${create_req_body}</arg>
<arg>lastName=${new_lastName}</arg>
<arg>phone=${new_phone}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20220905 14:27:28.865" endtime="20220905 14:27:28.865"/>
</kw>
<kw name="When PUT" library="RequestsLibrary">
<var>${put_response}</var>
<arg>url=${API_URL}/user/${username}</arg>
<arg>json=${create_req_body}</arg>
<arg>expected_status=200</arg>
<doc>Sends a PUT request.</doc>
<msg timestamp="20220905 14:27:29.294" level="INFO">PUT Request : url=https://petstore.swagger.io/v2/user/Leo 
 path_url=/v2/user/Leo 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '163', 'Content-Type': 'application/json'} 
 body=b'{"id": 1553, "username": "Leo", "firstName": "Daniel", "lastName": "Brown", "email": "test@hotmail.com", "password": "f56%&amp;*", "phone": "1876865", "userStatus": 6}' 
 </msg>
<msg timestamp="20220905 14:27:29.294" level="INFO">PUT Response : url=https://petstore.swagger.io/v2/user/Leo 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:30 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"1553"} 
 </msg>
<msg timestamp="20220905 14:27:29.294" level="INFO">${put_response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:28.866" endtime="20220905 14:27:29.294"/>
</kw>
<kw name="Then The response should have correct data" library="DataChecker">
<arg>expected_value=${put_response.json()}[type]</arg>
<arg>actual_value=unknown</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_value}</arg>
<arg>${actual_value}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:29.296" endtime="20220905 14:27:29.297"/>
</kw>
<status status="PASS" starttime="20220905 14:27:29.294" endtime="20220905 14:27:29.297"/>
</kw>
<tag>API</tag>
<tag>API_USER</tag>
<status status="PASS" starttime="20220905 14:27:27.958" endtime="20220905 14:27:29.298"/>
</test>
<test id="s1-s1-s1-t3" name="API_TS001_Test_3: Get the user from username" line="37">
<kw name="User Logout" library="UserKeywords" type="SETUP">
<kw name="GET" library="RequestsLibrary">
<arg>url=${API_URL}/user/logout</arg>
<arg>expected_status=200</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:29.713" level="INFO">GET Request : url=https://petstore.swagger.io/v2/user/logout 
 path_url=/v2/user/logout 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220905 14:27:29.713" level="INFO">GET Response : url=https://petstore.swagger.io/v2/user/logout 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:30 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"ok"} 
 </msg>
<status status="PASS" starttime="20220905 14:27:29.300" endtime="20220905 14:27:29.713"/>
</kw>
<status status="PASS" starttime="20220905 14:27:29.299" endtime="20220905 14:27:29.713"/>
</kw>
<kw name="When GET" library="RequestsLibrary">
<var>${get_response}</var>
<arg>url=${API_URL}/user/${username}</arg>
<arg>expected_status=200</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:30.136" level="INFO">GET Request : url=https://petstore.swagger.io/v2/user/Leo 
 path_url=/v2/user/Leo 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220905 14:27:30.136" level="INFO">GET Response : url=https://petstore.swagger.io/v2/user/Leo 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:31 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"id":1553,"username":"Leo","firstName":"Daniel","lastName":"Brown","email":"test@hotmail.com","password":"f56%&amp;*","phone":"1876865","userStatus":6} 
 </msg>
<msg timestamp="20220905 14:27:30.136" level="INFO">${get_response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:29.714" endtime="20220905 14:27:30.137"/>
</kw>
<kw name="When Validate the response schema with reference schema" library="DataChecker">
<arg>input=${get_response.json()}</arg>
<arg>ref_path=${GLOBAL_SCHEMA_RESP_GET_USER}</arg>
<kw name="Get Reference Json" library="Validate_json">
<var>${ref}</var>
<arg>reference_schema_path=${ref_path}</arg>
<msg timestamp="20220905 14:27:30.153" level="INFO">{'id': 1553, 'username': 'Leo', 'firstName': 'Daniel', 'lastName': 'Brown', 'email': 'test@hotmail.com', 'password': 'f56%&amp;*', 'phone': '1876865', 'userStatus': 6}</msg>
<msg timestamp="20220905 14:27:30.153" level="INFO">${ref} = {'id': 1553, 'username': 'Leo', 'firstName': 'Daniel', 'lastName': 'Brown', 'email': 'test@hotmail.com', 'password': 'f56%&amp;*', 'phone': '1876865', 'userStatus': 6}</msg>
<status status="PASS" starttime="20220905 14:27:30.150" endtime="20220905 14:27:30.153"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${input}</arg>
<arg>${ref}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:30.154" endtime="20220905 14:27:30.157"/>
</kw>
<status status="PASS" starttime="20220905 14:27:30.137" endtime="20220905 14:27:30.157"/>
</kw>
<tag>API</tag>
<tag>API_USER</tag>
<status status="PASS" starttime="20220905 14:27:29.298" endtime="20220905 14:27:30.158"/>
</test>
<test id="s1-s1-s1-t4" name=" API_TS001_Test_4: Delete the user" line="41">
<kw name="User Logout" library="UserKeywords" type="SETUP">
<kw name="GET" library="RequestsLibrary">
<arg>url=${API_URL}/user/logout</arg>
<arg>expected_status=200</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:30.587" level="INFO">GET Request : url=https://petstore.swagger.io/v2/user/logout 
 path_url=/v2/user/logout 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220905 14:27:30.587" level="INFO">GET Response : url=https://petstore.swagger.io/v2/user/logout 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:31 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"ok"} 
 </msg>
<status status="PASS" starttime="20220905 14:27:30.159" endtime="20220905 14:27:30.587"/>
</kw>
<status status="PASS" starttime="20220905 14:27:30.159" endtime="20220905 14:27:30.587"/>
</kw>
<kw name="Given User Logins" library="UserKeywords">
<arg>user=${login_user}</arg>
<arg>passwd=${login_passwd}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{authorization}</var>
<arg>username=${user}</arg>
<arg>password=${passwd}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220905 14:27:30.591" level="INFO">&amp;{authorization} = { username=adminUser | password=986/*#^$&amp; }</msg>
<status status="PASS" starttime="20220905 14:27:30.590" endtime="20220905 14:27:30.591"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<var>${login_response}</var>
<arg>url=${API_URL}/user/login</arg>
<arg>json=${authorization}</arg>
<arg>expected_status=anything</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:31.009" level="INFO">GET Request : url=https://petstore.swagger.io/v2/user/login 
 path_url=/v2/user/login 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '50', 'Content-Type': 'application/json'} 
 body=b'{"username": "adminUser", "password": "986/*#^$&amp;"}' 
 </msg>
<msg timestamp="20220905 14:27:31.009" level="INFO">GET Response : url=https://petstore.swagger.io/v2/user/login 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:31 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'close', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'X-Expires-After': 'Mon Sep 05 13:27:31 UTC 2022', 'X-Rate-Limit': '5000', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"logged in user session:1662380851950"} 
 </msg>
<msg timestamp="20220905 14:27:31.010" level="INFO">${login_response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:30.591" endtime="20220905 14:27:31.010"/>
</kw>
<if>
<branch type="IF" condition="&quot;${user}&quot; != &quot;${EMPTY}&quot; and &quot;${passwd}&quot; != &quot;${EMPTY}&quot;">
<kw name="Status Should Be" library="RequestsLibrary">
<arg>200</arg>
<arg>${login_response}</arg>
<doc>Fails if response status code is different than the expected.</doc>
<status status="PASS" starttime="20220905 14:27:31.012" endtime="20220905 14:27:31.013"/>
</kw>
<status status="PASS" starttime="20220905 14:27:31.011" endtime="20220905 14:27:31.013"/>
</branch>
<branch type="ELSE">
<kw name="Fail" library="BuiltIn">
<arg>message=Invalid login</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220905 14:27:31.014" endtime="20220905 14:27:31.014"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:31.013" endtime="20220905 14:27:31.014"/>
</branch>
<status status="PASS" starttime="20220905 14:27:31.010" endtime="20220905 14:27:31.014"/>
</if>
<status status="PASS" starttime="20220905 14:27:30.589" endtime="20220905 14:27:31.014"/>
</kw>
<kw name="When DELETE" library="RequestsLibrary">
<var>${delete_response}</var>
<arg>url=${API_URL}/user/${username}</arg>
<arg>expected_status=200</arg>
<doc>Sends a DELETE request.</doc>
<msg timestamp="20220905 14:27:31.420" level="INFO">DELETE Request : url=https://petstore.swagger.io/v2/user/Leo 
 path_url=/v2/user/Leo 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20220905 14:27:31.420" level="INFO">DELETE Response : url=https://petstore.swagger.io/v2/user/Leo 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:32 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"Leo"} 
 </msg>
<msg timestamp="20220905 14:27:31.421" level="INFO">${delete_response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:31.015" endtime="20220905 14:27:31.421"/>
</kw>
<kw name="Then The response should have correct data" library="DataChecker">
<arg>expected_value=${delete_response.json()}[type]</arg>
<arg>actual_value=unknown</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_value}</arg>
<arg>${actual_value}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:31.422" endtime="20220905 14:27:31.423"/>
</kw>
<status status="PASS" starttime="20220905 14:27:31.421" endtime="20220905 14:27:31.423"/>
</kw>
<kw name="And The response should have correct data" library="DataChecker">
<arg>expected_value=${delete_response.json()}[message]</arg>
<arg>actual_value=${username}</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_value}</arg>
<arg>${actual_value}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:31.424" endtime="20220905 14:27:31.425"/>
</kw>
<status status="PASS" starttime="20220905 14:27:31.423" endtime="20220905 14:27:31.425"/>
</kw>
<tag>API</tag>
<tag>API_USER</tag>
<status status="PASS" starttime="20220905 14:27:30.158" endtime="20220905 14:27:31.425"/>
</test>
<test id="s1-s1-s1-t5" name="API_TS001_Test_5: Add an user without login (Negative test)" line="48">
<kw name="User Logout" library="UserKeywords" type="SETUP">
<kw name="GET" library="RequestsLibrary">
<arg>url=${API_URL}/user/logout</arg>
<arg>expected_status=200</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:31.818" level="INFO">GET Request : url=https://petstore.swagger.io/v2/user/logout 
 path_url=/v2/user/logout 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220905 14:27:31.818" level="INFO">GET Response : url=https://petstore.swagger.io/v2/user/logout 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:32 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"ok"} 
 </msg>
<status status="PASS" starttime="20220905 14:27:31.426" endtime="20220905 14:27:31.818"/>
</kw>
<status status="PASS" starttime="20220905 14:27:31.426" endtime="20220905 14:27:31.819"/>
</kw>
<kw name="Given Get reference json" library="Validate_json">
<var>${create_req_body}</var>
<arg>reference_schema_path=${GLOBAL_SCHEMA_SEND_ADD_USER}</arg>
<msg timestamp="20220905 14:27:31.820" level="INFO">{'id': 1553, 'username': 'Leo', 'firstName': 'Daniel', 'lastName': 'Dark', 'email': 'test@hotmail.com', 'password': 'f56%&amp;*', 'phone': '480462046', 'userStatus': 6}</msg>
<msg timestamp="20220905 14:27:31.820" level="INFO">${create_req_body} = {'id': 1553, 'username': 'Leo', 'firstName': 'Daniel', 'lastName': 'Dark', 'email': 'test@hotmail.com', 'password': 'f56%&amp;*', 'phone': '480462046', 'userStatus': 6}</msg>
<status status="PASS" starttime="20220905 14:27:31.819" endtime="20220905 14:27:31.820"/>
</kw>
<kw name="When POST" library="RequestsLibrary">
<var>${post_response}</var>
<arg>url=${API_URL}/user</arg>
<arg>json=${create_req_body}</arg>
<arg>expected_status=anything</arg>
<doc>Sends a POST request.</doc>
<msg timestamp="20220905 14:27:32.235" level="INFO">POST Request : url=https://petstore.swagger.io/v2/user 
 path_url=/v2/user 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '164', 'Content-Type': 'application/json'} 
 body=b'{"id": 1553, "username": "Leo", "firstName": "Daniel", "lastName": "Dark", "email": "test@hotmail.com", "password": "f56%&amp;*", "phone": "480462046", "userStatus": 6}' 
 </msg>
<msg timestamp="20220905 14:27:32.236" level="INFO">POST Response : url=https://petstore.swagger.io/v2/user 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:33 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"1553"} 
 </msg>
<msg timestamp="20220905 14:27:32.236" level="INFO">${post_response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:31.820" endtime="20220905 14:27:32.236"/>
</kw>
<kw name="Then Run Keyword And Return Status" library="BuiltIn">
<var>${failed}</var>
<arg>Status should be</arg>
<arg>status=200</arg>
<arg>url=${post_response}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Status Should Be" library="RequestsLibrary">
<arg>status=200</arg>
<arg>url=${post_response}</arg>
<doc>Fails if response status code is different than the expected.</doc>
<msg timestamp="20220905 14:27:32.237" level="FAIL">InvalidResponse: url=&lt;Response [200]&gt;</msg>
<status status="FAIL" starttime="20220905 14:27:32.236" endtime="20220905 14:27:32.238"/>
</kw>
<msg timestamp="20220905 14:27:32.238" level="INFO">${failed} = False</msg>
<status status="PASS" starttime="20220905 14:27:32.236" endtime="20220905 14:27:32.238"/>
</kw>
<kw name="And Run Keyword If" library="BuiltIn">
<arg>${failed}</arg>
<arg>FAIL</arg>
<arg>message=Status should not be 200 since user is not login</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220905 14:27:32.239" endtime="20220905 14:27:32.239"/>
</kw>
<tag>API</tag>
<tag>API_USER</tag>
<status status="PASS" starttime="20220905 14:27:31.425" endtime="20220905 14:27:32.239"/>
</test>
<test id="s1-s1-s1-t6" name="API_TS001_Test_6: Try to update invalid user (Negative test)" line="54">
<kw name="User Logout" library="UserKeywords" type="SETUP">
<kw name="GET" library="RequestsLibrary">
<arg>url=${API_URL}/user/logout</arg>
<arg>expected_status=200</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:32.630" level="INFO">GET Request : url=https://petstore.swagger.io/v2/user/logout 
 path_url=/v2/user/logout 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220905 14:27:32.630" level="INFO">GET Response : url=https://petstore.swagger.io/v2/user/logout 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:33 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"ok"} 
 </msg>
<status status="PASS" starttime="20220905 14:27:32.241" endtime="20220905 14:27:32.630"/>
</kw>
<status status="PASS" starttime="20220905 14:27:32.241" endtime="20220905 14:27:32.631"/>
</kw>
<kw name="Given User Logins" library="UserKeywords">
<arg>user=${login_user}</arg>
<arg>passwd=${login_passwd}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{authorization}</var>
<arg>username=${user}</arg>
<arg>password=${passwd}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220905 14:27:32.632" level="INFO">&amp;{authorization} = { username=adminUser | password=986/*#^$&amp; }</msg>
<status status="PASS" starttime="20220905 14:27:32.632" endtime="20220905 14:27:32.632"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<var>${login_response}</var>
<arg>url=${API_URL}/user/login</arg>
<arg>json=${authorization}</arg>
<arg>expected_status=anything</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:33.040" level="INFO">GET Request : url=https://petstore.swagger.io/v2/user/login 
 path_url=/v2/user/login 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '50', 'Content-Type': 'application/json'} 
 body=b'{"username": "adminUser", "password": "986/*#^$&amp;"}' 
 </msg>
<msg timestamp="20220905 14:27:33.040" level="INFO">GET Response : url=https://petstore.swagger.io/v2/user/login 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:33 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'close', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'X-Expires-After': 'Mon Sep 05 13:27:33 UTC 2022', 'X-Rate-Limit': '5000', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"logged in user session:1662380853983"} 
 </msg>
<msg timestamp="20220905 14:27:33.041" level="INFO">${login_response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:32.632" endtime="20220905 14:27:33.041"/>
</kw>
<if>
<branch type="IF" condition="&quot;${user}&quot; != &quot;${EMPTY}&quot; and &quot;${passwd}&quot; != &quot;${EMPTY}&quot;">
<kw name="Status Should Be" library="RequestsLibrary">
<arg>200</arg>
<arg>${login_response}</arg>
<doc>Fails if response status code is different than the expected.</doc>
<status status="PASS" starttime="20220905 14:27:33.042" endtime="20220905 14:27:33.043"/>
</kw>
<status status="PASS" starttime="20220905 14:27:33.042" endtime="20220905 14:27:33.043"/>
</branch>
<branch type="ELSE">
<kw name="Fail" library="BuiltIn">
<arg>message=Invalid login</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220905 14:27:33.043" endtime="20220905 14:27:33.043"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:33.043" endtime="20220905 14:27:33.043"/>
</branch>
<status status="PASS" starttime="20220905 14:27:33.041" endtime="20220905 14:27:33.043"/>
</if>
<status status="PASS" starttime="20220905 14:27:32.631" endtime="20220905 14:27:33.043"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>dictionary=${create_req_body}</arg>
<arg>password=${new_password}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20220905 14:27:33.043" endtime="20220905 14:27:33.044"/>
</kw>
<kw name="When PUT" library="RequestsLibrary">
<var>${invalid_response}</var>
<arg>url=${API_URL}/user/${invalid_username}</arg>
<arg>json=${create_req_body}</arg>
<arg>expected_status=400</arg>
<doc>Sends a PUT request.</doc>
<msg timestamp="20220905 14:27:33.431" level="INFO">PUT Request : url=https://petstore.swagger.io/v2/user/***invalidName*** 
 path_url=/v2/user/***invalidName*** 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '166', 'Content-Type': 'application/json'} 
 body=b'{"id": 1553, "username": "Leo", "firstName": "Daniel", "lastName": "Brown", "email": "test@hotmail.com", "password": "***#!@@$%", "phone": "1876865", "userStatus": 6}' 
 </msg>
<msg timestamp="20220905 14:27:33.431" level="INFO">PUT Response : url=https://petstore.swagger.io/v2/user/***invalidName*** 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:34 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"1553"} 
 </msg>
<msg timestamp="20220905 14:27:33.431" level="FAIL">Url: https://petstore.swagger.io/v2/user/***invalidName*** Expected status: 200 != 400</msg>
<status status="FAIL" starttime="20220905 14:27:33.044" endtime="20220905 14:27:33.432"/>
</kw>
<kw name="Then The response should have correct data" library="DataChecker">
<arg>expected_value=${invalid_response.json()}[type]</arg>
<arg>actual_value=error</arg>
<status status="NOT RUN" starttime="20220905 14:27:33.432" endtime="20220905 14:27:33.433"/>
</kw>
<kw name="And The response should have correct data" library="DataChecker">
<arg>expected_value=${invalid_response.json()}[message]</arg>
<arg>actual_value=Invalid user supplied</arg>
<status status="NOT RUN" starttime="20220905 14:27:33.433" endtime="20220905 14:27:33.433"/>
</kw>
<tag>API</tag>
<tag>API_USER</tag>
<status status="FAIL" starttime="20220905 14:27:32.240" endtime="20220905 14:27:33.433">Url: https://petstore.swagger.io/v2/user/***invalidName*** Expected status: 200 != 400</status>
</test>
<test id="s1-s1-s1-t7" name="API_TS001_Test_7: Try to update non-existed user (Negative test)" line="61">
<kw name="User Logout" library="UserKeywords" type="SETUP">
<kw name="GET" library="RequestsLibrary">
<arg>url=${API_URL}/user/logout</arg>
<arg>expected_status=200</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:33.840" level="INFO">GET Request : url=https://petstore.swagger.io/v2/user/logout 
 path_url=/v2/user/logout 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220905 14:27:33.840" level="INFO">GET Response : url=https://petstore.swagger.io/v2/user/logout 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:34 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"ok"} 
 </msg>
<status status="PASS" starttime="20220905 14:27:33.434" endtime="20220905 14:27:33.840"/>
</kw>
<status status="PASS" starttime="20220905 14:27:33.434" endtime="20220905 14:27:33.840"/>
</kw>
<kw name="Given User Logins" library="UserKeywords">
<arg>user=${login_user}</arg>
<arg>passwd=${login_passwd}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{authorization}</var>
<arg>username=${user}</arg>
<arg>password=${passwd}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220905 14:27:33.842" level="INFO">&amp;{authorization} = { username=adminUser | password=986/*#^$&amp; }</msg>
<status status="PASS" starttime="20220905 14:27:33.841" endtime="20220905 14:27:33.842"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<var>${login_response}</var>
<arg>url=${API_URL}/user/login</arg>
<arg>json=${authorization}</arg>
<arg>expected_status=anything</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:34.246" level="INFO">GET Request : url=https://petstore.swagger.io/v2/user/login 
 path_url=/v2/user/login 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '50', 'Content-Type': 'application/json'} 
 body=b'{"username": "adminUser", "password": "986/*#^$&amp;"}' 
 </msg>
<msg timestamp="20220905 14:27:34.247" level="INFO">GET Response : url=https://petstore.swagger.io/v2/user/login 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:35 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'close', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'X-Expires-After': 'Mon Sep 05 13:27:35 UTC 2022', 'X-Rate-Limit': '5000', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"logged in user session:1662380855189"} 
 </msg>
<msg timestamp="20220905 14:27:34.247" level="INFO">${login_response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:33.842" endtime="20220905 14:27:34.247"/>
</kw>
<if>
<branch type="IF" condition="&quot;${user}&quot; != &quot;${EMPTY}&quot; and &quot;${passwd}&quot; != &quot;${EMPTY}&quot;">
<kw name="Status Should Be" library="RequestsLibrary">
<arg>200</arg>
<arg>${login_response}</arg>
<doc>Fails if response status code is different than the expected.</doc>
<status status="PASS" starttime="20220905 14:27:34.248" endtime="20220905 14:27:34.249"/>
</kw>
<status status="PASS" starttime="20220905 14:27:34.248" endtime="20220905 14:27:34.249"/>
</branch>
<branch type="ELSE">
<kw name="Fail" library="BuiltIn">
<arg>message=Invalid login</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220905 14:27:34.249" endtime="20220905 14:27:34.249"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:34.249" endtime="20220905 14:27:34.250"/>
</branch>
<status status="PASS" starttime="20220905 14:27:34.247" endtime="20220905 14:27:34.250"/>
</if>
<status status="PASS" starttime="20220905 14:27:33.841" endtime="20220905 14:27:34.250"/>
</kw>
<kw name="And Set To Dictionary" library="Collections">
<arg>dictionary=${create_req_body}</arg>
<arg>password=${new_password}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20220905 14:27:34.250" endtime="20220905 14:27:34.250"/>
</kw>
<kw name="When PUT" library="RequestsLibrary">
<var>${nonExistedPut_response}</var>
<arg>url=${API_URL}/user/${nonExisted_username}</arg>
<arg>json=${create_req_body}</arg>
<arg>expected_status=404</arg>
<doc>Sends a PUT request.</doc>
<msg timestamp="20220905 14:27:34.658" level="INFO">PUT Request : url=https://petstore.swagger.io/v2/user/Henry 
 path_url=/v2/user/Henry 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '166', 'Content-Type': 'application/json'} 
 body=b'{"id": 1553, "username": "Leo", "firstName": "Daniel", "lastName": "Brown", "email": "test@hotmail.com", "password": "***#!@@$%", "phone": "1876865", "userStatus": 6}' 
 </msg>
<msg timestamp="20220905 14:27:34.659" level="INFO">PUT Response : url=https://petstore.swagger.io/v2/user/Henry 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:35 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"1553"} 
 </msg>
<msg timestamp="20220905 14:27:34.659" level="FAIL">Url: https://petstore.swagger.io/v2/user/Henry Expected status: 200 != 404</msg>
<status status="FAIL" starttime="20220905 14:27:34.251" endtime="20220905 14:27:34.659"/>
</kw>
<kw name="Then The response should have correct data" library="DataChecker">
<arg>input=${nonExistedPut_response.json()}[type]</arg>
<arg>actual_value=error</arg>
<status status="NOT RUN" starttime="20220905 14:27:34.660" endtime="20220905 14:27:34.660"/>
</kw>
<kw name="And The response should have correct data" library="DataChecker">
<arg>input=${nonExistedPut_response.json()}[message]</arg>
<arg>actual_value=User not found</arg>
<status status="NOT RUN" starttime="20220905 14:27:34.660" endtime="20220905 14:27:34.660"/>
</kw>
<tag>API</tag>
<tag>API_USER</tag>
<status status="FAIL" starttime="20220905 14:27:33.434" endtime="20220905 14:27:34.661">Url: https://petstore.swagger.io/v2/user/Henry Expected status: 200 != 404</status>
</test>
<status status="FAIL" starttime="20220905 14:27:26.589" endtime="20220905 14:27:34.661"/>
</suite>
<suite id="s1-s1-s2" name="TS002 API Pet" source="C:\PythonInterviewProject\TestSuites\API_Tests\TS002_API_Pet.robot">
<test id="s1-s1-s2-t1" name="API_TS002_Test_1: Add a pet" line="16">
<kw name="Given Get reference json" library="Validate_json">
<var>${send_body}</var>
<arg>reference_schema_path=${GLOBAL_SCHEMA_SEND_CREATE_PET}</arg>
<msg timestamp="20220905 14:27:26.736" level="INFO">{'id': 15, 'category': {'id': 1, 'name': 'dog'}, 'name': 'doggie', 'photoUrls': ['//dog.jpg'], 'tags': [{'id': 0, 'name': 'white'}], 'status': 'available'}</msg>
<msg timestamp="20220905 14:27:26.736" level="INFO">${send_body} = {'id': 15, 'category': {'id': 1, 'name': 'dog'}, 'name': 'doggie', 'photoUrls': ['//dog.jpg'], 'tags': [{'id': 0, 'name': 'white'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20220905 14:27:26.735" endtime="20220905 14:27:26.736"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${send_body}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220905 14:27:26.737" level="INFO">${send_body} = {'id': 15, 'category': {'id': 1, 'name': 'dog'}, 'name': 'doggie', 'photoUrls': ['//dog.jpg'], 'tags': [{'id': 0, 'name': 'white'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20220905 14:27:26.736" endtime="20220905 14:27:26.737"/>
</kw>
<kw name="When POST" library="RequestsLibrary">
<var>${response_body}</var>
<arg>url=${API_URL}/pet</arg>
<arg>json=${send_body}</arg>
<arg>expected_status=200</arg>
<doc>Sends a POST request.</doc>
<msg timestamp="20220905 14:27:27.140" level="INFO">POST Request : url=https://petstore.swagger.io/v2/pet 
 path_url=/v2/pet 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '155', 'Content-Type': 'application/json'} 
 body=b'{"id": 15, "category": {"id": 1, "name": "dog"}, "name": "doggie", "photoUrls": ["//dog.jpg"], "tags": [{"id": 0, "name": "white"}], "status": "available"}' 
 </msg>
<msg timestamp="20220905 14:27:27.140" level="INFO">POST Response : url=https://petstore.swagger.io/v2/pet 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:28 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"id":15,"category":{"id":1,"name":"dog"},"name":"doggie","photoUrls":["//dog.jpg"],"tags":[{"id":0,"name":"white"}],"status":"available"} 
 </msg>
<msg timestamp="20220905 14:27:27.140" level="INFO">${response_body} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:26.737" endtime="20220905 14:27:27.140"/>
</kw>
<kw name="Then Validate the response schema with reference schema" library="DataChecker">
<arg>input=${response_body.json()}</arg>
<arg>ref_path=${GLOBAL_SCHEMA_RESP_CREATE_PET}</arg>
<kw name="Get Reference Json" library="Validate_json">
<var>${ref}</var>
<arg>reference_schema_path=${ref_path}</arg>
<msg timestamp="20220905 14:27:27.143" level="INFO">{'id': 15, 'category': {'id': 1, 'name': 'dog'}, 'name': 'doggie', 'photoUrls': ['//dog.jpg'], 'tags': [{'id': 0, 'name': 'white'}], 'status': 'available'}</msg>
<msg timestamp="20220905 14:27:27.143" level="INFO">${ref} = {'id': 15, 'category': {'id': 1, 'name': 'dog'}, 'name': 'doggie', 'photoUrls': ['//dog.jpg'], 'tags': [{'id': 0, 'name': 'white'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20220905 14:27:27.142" endtime="20220905 14:27:27.143"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${input}</arg>
<arg>${ref}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:27.143" endtime="20220905 14:27:27.143"/>
</kw>
<status status="PASS" starttime="20220905 14:27:27.141" endtime="20220905 14:27:27.143"/>
</kw>
<tag>API</tag>
<tag>API_PET</tag>
<status status="PASS" starttime="20220905 14:27:26.733" endtime="20220905 14:27:27.144"/>
</test>
<test id="s1-s1-s2-t2" name="API_TS002_Test_2: Update the pet image" line="22">
<kw name="Get From Dictionary" library="Collections">
<var>${pet_id}</var>
<arg>dictionary=${send_body}</arg>
<arg>key=id</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20220905 14:27:27.145" level="INFO">${pet_id} = 15</msg>
<status status="PASS" starttime="20220905 14:27:27.144" endtime="20220905 14:27:27.145"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${pet_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220905 14:27:27.145" level="INFO">${pet_id} = 15</msg>
<status status="PASS" starttime="20220905 14:27:27.145" endtime="20220905 14:27:27.145"/>
</kw>
<kw name="Upload Pet Image" library="PetKeywords">
<var>${files}</var>
<arg>imageFile_name=lovely_dog.jpg</arg>
<kw name="Get File For Streaming Upload" library="RequestsLibrary">
<var>${image_file}</var>
<arg>${GLOBAL_SCHEMA_PET_DIRECTORY}\\${imageFile_name}</arg>
<doc>Opens and returns a file descriptor of a specified file to be passed as ``data`` parameter
to other requests keywords.</doc>
<msg timestamp="20220905 14:27:27.146" level="INFO">${image_file} = &lt;_io.BufferedReader name='C:\\PythonInterviewProject\\TestData\\Variables\\..\\Schemas\\Pet\\lovely_dog.jpg'&gt;</msg>
<status status="PASS" starttime="20220905 14:27:27.146" endtime="20220905 14:27:27.146"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${files}</var>
<arg>file</arg>
<arg>${image_file}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220905 14:27:27.147" level="INFO">${files} = {'file': &lt;_io.BufferedReader name='C:\\PythonInterviewProject\\TestData\\Variables\\..\\Schemas\\Pet\\lovely_dog.jpg'&gt;}</msg>
<status status="PASS" starttime="20220905 14:27:27.147" endtime="20220905 14:27:27.147"/>
</kw>
<msg timestamp="20220905 14:27:27.147" level="INFO">${files} = {'file': &lt;_io.BufferedReader name='C:\\PythonInterviewProject\\TestData\\Variables\\..\\Schemas\\Pet\\lovely_dog.jpg'&gt;}</msg>
<status status="PASS" starttime="20220905 14:27:27.146" endtime="20220905 14:27:27.147"/>
</kw>
<kw name="POST" library="RequestsLibrary">
<var>${response_body}</var>
<arg>url=${API_URL}/pet/${pet_id}/uploadImage</arg>
<arg>files=${files}</arg>
<arg>expected_status=200</arg>
<doc>Sends a POST request.</doc>
<msg timestamp="20220905 14:27:27.558" level="INFO">POST Request : url=https://petstore.swagger.io/v2/pet/15/uploadImage 
 path_url=/v2/pet/15/uploadImage 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '12016', 'Content-Type': 'multipart/form-data; boundary=8291792f6d09c63f8f026414a816b75d'} 
 body=b'--8291792f6d09c63f8f026414a816b75d\r\nContent-Disposition: form-data; name="file"; filename="lovely_dog.jpg"\r\n\r\n\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00x\x00x\x00\x00\xff\xdb\x00C\x00\x03\x02\x02\x03\x02\x02\x03\x03\x03\x03\x04\x03\x03\x04\x05\x08\x05\x05\x04\x04\x05\n\x07\x07\x06\x08\x0c\n\x0c\x0c\x0b\n\x0b\x0b\r\x0e\x12\x10\r\x0e\x11\x0e\x0b\x0b\x10\x16\x10\x11\x13\x14\x15\x15\x15\x0c\x0f\x17\x18\x16\x14\x18\x12\x14\x15\x14\xff\xdb\x00C\x01\x03\x04\x04\x05\x04\x05\t\x05\x05\t\x14\r\x0b\r\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\xff\xc0\x00\x11\x08\x00\xc5\x00\xd4\x03\x01"\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x1f\x00\x00\x01\x05\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\xff\xc4\x00\xb5\x10\x00\x02\x01\x03\x03\x02\x04\x03\x05\x05\x04\x04\x00\x00\x01}\x01\x02\x03\x00\x04\x11\x05\x12!1A\x06\x13Qa\x07"q\x142\x81\x91\xa1\x08#B\xb1\xc1\x15R\xd1\xf0$3br\x82\t\n\x16\x17\x18\x19\x1a%&amp;\'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94\x95\x96\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xff\xc4\x00\x1f\x01\x00\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\xff\xc4\x00\xb5\x11\x00\x02\x01\x02\x04\x04\x03\x04\x07\x05\x04\x04\x00\x01\x02w\x00\x01\x02\x03\x11\x04\x05!1\x06\x12AQ\x07aq\x13"2\x81\x08\x14B\x91\xa1\xb1\xc1\t#3R\xf0\x15br\xd1\n\x16$4\xe1%\xf1\x17\x18\x19\x1a&amp;\'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94\x95\x96\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00?\x00\xfa\xda\xfaAooh\xea\xa0\x9d\xc5rO\xa8\xaf2\xf8\xb55\xd4\xda.\x9a\xe7n\xd4\xd4"98\xf55\xdd\xf8\x8bk\xe9\xda{\x8c\xe5\xa5\xdb\xfaW\x9d\xfc^\x928&lt;?\xa6\xdb7\xca\xedx\x84\x1c\xfb\x9a\xf2\xba\xdc\xf6mtzj\xcd4\xbeL\x84\xaf\x94\xaa\x15kvhe\xb8[9Y\xd5\x88 c\x00q\\5\xabIg\xa1C\xe6\x03\x81\xce\xec\xf3\x8a\xd5\x92\xf9\xd6=&amp;X\xe5i!\x92@\x1czTS\xd6Z\x15Q%\x13f\xf6\xe6kKy\x92\xde1\x93/=\xebM|96\xa5oow\x14\x98\x91NM_\xd0\xf4\x15\xb8\x8c\xcab\xde\x8e\xdb\xfez\xea-mc\xb5\\"\xe1\x7f\xbb^\x8d8\x7f1\xe5T\x9fc\x0e=*9\x94\xc5u\x11fn\x8f\x92?\x1a\xe5|m\xf0\xae-B\x08c\xff\x00X\x8c\xe1\x88\xcf\xa1\xc8\xafP\xd8\xad\x8c\x8c\xe3\xa5JaI\x957\x0f\xbax\xad\xbd\x9a0\x8c\xe4\x8e2?\x87vo\xa5$\x13,d\xc8\xac\xad\x85\x19\xe5O5\xe6^,\xf8&lt;\xa1\xa5{(\x83K\x02\x01\xc2\xf5\xcfS\xfc\xab\xe8\x1f/k\x12\x0e\x01\x18\xc5W\xba\xb7\xdc2\x0e;\x1e;R\xf6H\xafi+\x9eO\xe1=\x16M/C\xb5\xfbD\x0c\xbeSe\xbf\x97\xf5\xac\xb9\xa5I\xb5+\xc2\x14\x05]\xc7\xa7\xd2\xbdj\xf2\xdf\xed\x11\x88B\x80==k\x83\xd6|\x1fw\x0c\xb7S[\xa6\xf3"\xb7\xcb\xfe~\x95\x8dJN\xda\x1d\x14\xeb$\xf52t\xf9\x1ai\x1d\x91\x82\xaa\xc7\xc6Eb\xeb\xd3\xc9gcu1\x90\x10\xd0\xbex\xf6\xa4\xb8\x9am\x1e7\x86}\xd1\xb3C\xbb#\xb1\xee\x0f\xbdr\xda\xa6\xa4\xb7\xfa\x14\x88\x933)\x81\xc9\'\xafz\x8a{X\xe8\xa8\xd7+h\xe7~\x19\x1f3\xc1\xda4\xc0|\x82I&lt;\xcf|\xc8\xc6\xbd#L\xb8\x92O\x10A\xcf\r\xed\xda\xbc\xa3\xe1~\xa9\x1a|;\xd3\x17\x8c\x8b\x97\\z\xe1\xc8\xafO\xd3o#_\x13Z\x9f\xe2*H^\xd56\xd4\xe9\xba\x8d%s\xd3.\x1e)\xacv67m\x04\xe7\xebX\xf7j\xf1,\xcf\x18\x04\xa0\x1bx\x15\x0e\xa5p\xeb\x19l\xed%\x06\x05Ciy$\xc0\x81\xcb\xb8\xe4zU\x1eb\xd2)2\x1d&amp;\x19\xe6\xd4\xc7\xca\xc1\x99I\x07\xd0\xe3\xady\x87\xc5\xcda\xf4\xb9\xb4\xa8\xa5a$ff\xde0?\xba\xd5\xebv\xf3\xcfg\xa8\x9d\xa3#\xc9c\x9f\xc2\xbc3\xe2\x93-\xd5\xc5\xa7\xda\x18\xf1#7\xe8G\xf5\xaa\x84\x95\xecm\xd2\xe7\x99\xfe\xcf\xb6"\xe6\xeb\xc5ne\\\x89\xdf\x9f\xf6Nr+\xbd\xf1Fe\xd1\xf4\x89\xed%\xcd\xb82#w\xf4\xff\x00\n\xe1&gt;\x04\xeaM\xa7\\k\xd6\x8c\xea\xaf=\xc4\x8a\x1bh\xcfJ\xe9mD\xc9\xe0\x1b\xc6\x91\x8b\xc9k|\xc0\x03\xe8\xd5u\x17-F\xd9\xbd\x07\xfb\xa5\x1e\xa6\xde\x82\xc8\xdaL\x119#l\x81\xb3\x9f\xf3\xeb^\x9bku\x0e!\x0f\xf7\x86\n\x9fU\xc5x\x94\xda\xd0\xb3\xd2B\x91\xb4\xe0a\x87\xbdw\x1a~\xad&amp;\xa4\xfa\x1cj6\xbe\xc2\xaf\xee\x061\xfc\xeb"\xab=\x11\xd8\xea\xd7\xd1\xeame"\x1d\xbea)\xc7\x1c\xe4\xd77\xe2/:8R&amp;e\xf3\x16u\xc9#\xa8\xc0\xa7\xdd\x07K\xc7\x82\x12O\x93 \xc7\xb6y\xcdE\xe2\x88\xe4\x92\xe2\x07\xce\x19@\xc0\xec\xc7\x1d\xe89\xa3\xab\xd0\xf9\xb7\xe3~\xa4\xf1\xf8\xeaNb\xc3@\x8c\xbc\x0e\x99lQY_\x1c5%o\x1d&gt;\xf0\xa0\xfd\x9e&gt;\x14p:\xd1A\xad\xcf\xbc\'\xbc\x8e\xf6\x18\xc3r\xb0\xc9\x91\x8f\\W\x98|mu\xff\x00\x84r\xcev\x04\xcb\x15\xf4`c\xbf5\xdd8e\xe25\xf9D\xa3ub|G\xf0\xba\xf8\xa2\xce\xde\xd3\xcc\xf2\xe3\xfbB\xc9\xbf\xfd\xdcV\x16\xb9\xb4\xbd\xd8\x9d&lt;\xac\xf3xv\xcd\x10\x86\x90\xa0\xdd\xec\rv&gt;\x06\xf0\xa8k\x18\x9fP\x88\x82\xa7tK\xfdk;G\xf0\xd0\xf2meY8U\xdaU\x87\xde\x1e\xb5\xdb\xe9\x0b4n#\x1f$c\xa6Ns\xedUJ6g-Z\x97V7\x96\xdda\xb7\x0b\xd1=\x16\x91i\xd211\x00:\xd4q\xb8\x93\xa75\xdapI\x93\x83R\xa4\x80-C\x8a7m8\xcdl\x89&amp;i\x07\xa5\r\xf3-F3R\x0e\x95A\xa1RXC7\xa5S\xb9\xb3\x91\xd5\x82\xc9\xb4\x11\xf8\xd6\x84\xb9\x1c\xfaUi\x1c\xd4\xf9\x07\x99\xe6\x9a\xaf\x80d\xd6\xb5+\xab\xab\x89H\xb7\x86=\x91F\xb9\xc9=\xcbW\x8dx\xca\xc5|&gt;e\xb7Y\x15\x02\xc2\xf9\xc9\xc6s\x9a\xfa\xb9\x97u\xbbm_\xbd\xd6\xbcK\xe2w\x85\xdeH/\'\xb6\xb33\xc8\x11\xb2c\x03#\xaf\xadd\xe2\xa3\xaa4\xf6\x8e\xcd3\xc1~\x14G\xf6\x8f\x03\xe9\xf8\xe0}\xaaN\xf9\xfe3^\xdb\xa4YE\xff\x00\t-\x9c\xac\xa4\xedL~u\xe4\x7f\r\xed\xde\xdf\xc3V\xb0\xbf\xfa\xc4\xbbe9#\xae\xee\x9c\x1cW\xb2\xe92G\x1e\xbe\x919\xc4\x8a\x83\x8cW7S\xd1r\xbc"t\xfa\xa5\xb8]R(\xca\xee\x8c\x01\xd2\xab\xfe\xe6\xde\xe2V\x1f.\xd58\xfc\xabF\xf1\x8ceY\x87\xef\x0f?\x85d\xbd\x9f\x9d\x1c\xf2\xc8v\x8e\xdd\xe9\xad\xce)\x04W\x05\x95%f\x0b\x95#\x9f\xa5x\x9f\xc4k\x8bWki$\xe8\x1d\x86+\xd6\xa6Cq}\x0c\n~U^=\xcd|\xf9\xf1qe\xb5\x8e\x15\'\x05fe&lt;\xf7\xad)\xc7\xde)\xc9\xf2\x9e\x7f\xf0\xfe\xe9m\xf5\xeb\x8b\xb5$\xc5\xf6\xe6V\xc7l\x8f\xfe\xb5z\x85\x9c\xb1]x\x7f\xc5\x16\xc1\x80m\xe9"\xe7\xdc\xd7\x97x\x0e\x19\xee,\xde\xe2"\xa28\xf5\x02\xd2\x8cpF\x0fz\xee\x95$Mw\\\x8c\x10!\xb8\xb02!\xcf\x0cT\x8f\xf1\xaa\xae\xd71\xd7C\xe1\xb9^\xe2\x16\x9bOP#\xf3\x17\x19\x0c;b\xbb\r\x1a\xe1\xe4M"X\x86\x1e&gt;\x19\xbe\xb8\xaej\x1b9"\xd2l&amp;\xf3\x08C\x19\xf3\x17\xd3=\rw~\x07\xb5\x8e+\x18!\x9ca\xb7eI\x1drk\x0b\xa2\xab\'do\xdd4Q\xea\xf2\xc6\x88\xc6f\xc6}\xce+\x0b\xc4\xe6\x7f\xb6\xd8\x9f\xe1\x12\xe0\xfb\x8c\xe0\xd7\xa2j\x9a\x0c0\xea\xd6\xd7p\xe1\xd8.\\~\x02\xb8\x1f\x88\x93=\x8a\xc3*\xaf\xcb\x1c\x84\x0f|\xb1?\xd6\x83\x1az=O\x93\xfe&lt;\xc1\r\x87\xc4K\xa8\x927e\xf2cn}\xc6h\xad?\x8eV\xb2\xdex\xf2I\x82g}\xb4\'\xaf\xfb4Qq\xb5\xa9\xf6\x82\xbc\xf7\t&lt;Q\x0f\xbd.s[ZW\x84n%F\x92\xe1\xc4\x83~U3U|:\xa5\xaf$PT)\x90\xe3w\xe1^\x92\xd6\xa6\xda\xc1\x1c\x959\x1f\xc3X\xad\x8a\xa9S\xdeQ\x16\xd65\x86\xce\x18\x94n*98\xfb\xbe\xd5\xa5fv\x95\xcf\x1c\xd6\x1d\x9e\xa1\xce\xca\xdf\xb3\x8b\xcd\x8fuo\x13\x92E\xfd\xc7\x1d\xf1U\xa6\x98Z\x92\t\x00\x8e\xd9\xa6\xea\x17_f\xb7\x1c\xd7\x93\xfcH\xf8\xa1\xa7\xe8\xb63\x94\xba\xb7\xb7\x1bI{\xa9\xe6H\x91\x0f\xfbL[\x19\xf6\x15\\\xe6\\\x87\xa9&amp;\xb0\xac\xe5D\x8a[\xb8\x0c3V\xe3\xba,A=k\xe5O\x84\xbf\xb4=\x8e\xbd\xad&gt;\x9bu\xa9\xdbjQ\xc8\xfe\\w\x96\xc7 7M\xa7\xde\xbe\x93\xd3Vi!F\xc3/\xa6\xea\xa8\xc8r\x8e\x86\xe4\x97^^9\xebH\xb7\x8d\xf5\xaa\xad\x0b\xb1P\xfe\x95\xcax\x83\xc5qh\xac\xc2y|\xa8\xd7\x9c\xd6\x92\xa9c8\xc0\xed&gt;\xd0\xf260qQ\xb4\x81\x9b\x19\xe6\xb8\xcf\rx\xfbO\xd72mnw\xba\xf1\xb75\xd4\xc4\xdb\x97\xcc\xf5\xac=\xa5\xcd$\xacX\xbc\x9f\xc9\xb6\xf9y\xfaV&lt;\xf0\xb6\xc2\xeac@\xe3\x9d\xbc\x93\xf5\xcdh\\\xff\x00\xc7\xb1\xaar\xc7\xfb\xb5\xfaS\xe6\xb9&lt;\xbc\xcc\xf2\xbf\x1bx5|\xe8n X\xe2;\xc4\xac\xb0\xae\x01=:~\x15\x16\x95n_\xc6\x19\xdaIh\xd4\x80\x05wZ\xc4l\xe5T\xb2c\x1cf\xb8\xfb;k\xed7\xc5\x91N\xc0:\x10@+\xe9X\xf5;c-,u\x9a\xe5\x9f\xda\xbc\xad\x8e\x00U\x199\xa6\xc1h\xab\xa7H\x8eFq\xde\x9bu|M\xae\x196\x9cg\xf5\xa7\xda\xc8&amp;\xf3\xd1\xbal\xad\x0ey\x1c\xe4\xb1\x98\xf5\x88\n\xa9+\x8e\xa0W\x83|X\xb7Y\xe4\xbe\x0f\xf2\x98\xa4fP~\x86\xbe\x88\xbe\x9e+{\x88\x00\xeb\x8e+\xc0~"\xc9\r\xc5\xed\xef\x9d\xeai\xd3\x97\xbet\xc6\x1c\xf0&lt;\xc3\xe0+\xbe\xb9\xa3x\xa7L\x90l\x8dw\xcc\x92\x1e\xe4v\x15\xe8\x17\x16\x90\xaczA!\xbc\xb9\xad\x9a\x10\xd8\xe7w\xbf\xe5\\\x07\xec\xfb\xa9J\xbe*\xbd\xb5D\x8f\xec\xd7M$I\xf5\xc1\xafM\xbf\x06\xdf\xc32\x8b\x80\x05\xce\x99~\x8a\xdfF&amp;\xa6\xbf\xc4oK\xf8H\x83M\xd3.\xa6\xb5\x82#\xf3.\xc3\xfa\x13]\xcf\x85\x14\\i\xe3\xcc\xda\x8f\x0c\x9b9\xeb\\3k\x89i\xbd\x92M\x8b\x1b\x10\x07\xd4\x83\xfdk\xb8\xf0L;\xadw\x8f\xde\xfd\xa2b\xdfN\x07\xf8\xd6+sz\xfb#\xb9\xba\xb3\x90\xcc%g\xc22`\x12x5\xc5|J\xd1\xc9\xd2VFl\x01*\x9c\x9a\xed\xfcI\xa8\x18\xeccB\x9bD 1?J\xe0\xbe*]\xce\xfa]\xab\x8f\xf8\xf7\x94\xab\x0f\xca\xad\xeequ&gt;a\xf8\xe5x\xb6\x9e6DA\xbc}\x8a\x03\x95\xe4}\xda+?\xe3L\x9f\xf1XE\xff\x00^P\xff\x00#EI\xa1\xf6\xc2\xcf\xf6)\xa2n\x86IT\xaf\xbf8\xafR\xbe\x91\xae,#\x92&gt;P\x0e~\xb5\xe2\xfa\x97\x9f{p\x91\xc3.\xc6\x89\xc6\xd7=\x10g\xad{&amp;\x8e\xa6-\x16(D\xc6\xe2"\xa1\x8c\x8f\xf7\x99\x8f_\xc2\x88\x99V\xf8\x84\xd2aEQ9]\xe4\x9d\xbb~\xb5\xbbopZf\x85\\#(\xce\xd3\xc5V\xb1\x8dma\xdd\x1cc \xe6\xb2\x1a\xde]wP\x96\xe2\x13\xb65;_i\xae\xa8\x9cs*\xf8\xda\xf6[\x88\xcc\x16\xa0\xcd/B\x13;?\x13_\x9e\xbf\xb5\xe7\x81&lt;Om\xae\x9b\x9b\xaf&gt;\xefN\x9e\x03\x15\xa8\x8a6d\xb5\x7fR\x07\xde\xf5\xaf\xd2\xdbM\'b\x05|\x11\xf4\xac\xcdc\xc0\xd6\x1e(x\xed.\xd2?%p\xc42\x828\xedQMrO\x98\xd3\x9f\xdc\xe5?:\xbfc\x9f\x85\xfa\xf7\x8c|[k$\x91\xddD!eF\xbf\xba\x8cE\x18T^\x81&gt;\xa3\xad~\x9b\xe9\xfa{\xe9zL\x16\xf2Je\x91\x06\x19\x88\xa4\xd1\xf4\x1d3E\xb3\x8e\x0b\x0bhm\xe2U\xda&lt;\xb4\x03\x8a\xb9}p\xab\x17\'q\xcfZ\xe9\xdfS.b\x19\x95\xbe\xcb\xb9y+_.~\xd4\x1a\xde\xa3\xa3\xdcKoc\xe5\xaa\xb5\xac\xb7&amp;I\x8f\x0b\xb1\x0bv\xef\xc7\xeb\xf8\xd7\xd4\x90\xdc\tc\xf2\xc7\xf1p~\x95\xe6\xbf\x19&gt;\x12\xd9x\xe9Y.\x03ym\x13DZ?\xbc\x15\x86\x08\x1fPMg&gt;\x86\xd4\xf5?&gt;\xfe\x1b\xfe\xd3\xba\xe6\x9b\xafyw1\xa6\xb3\xa3\xf9\xcb\x0bZ\xba}\x9a\xf6\x15#&amp;D\xc1`\xcb\x91\x8eq\xd7\xa8\xaf\xbdt\x1f\x1d\x13\xa6\xdbI\xb2i\xac\xee#YcyN\xc6\x03\xfb\xa7\xd4\x8f\xff\x00Vk\xc7\xbe\x1e\xfe\xc2\xfaO\x87\xfcT5;\xbb\xc9n\xac\xed\xc8x-eQ\xcf&lt;\x06=H\x1dz\xf6\xaf\xa5\xae|\x1fg\x0c\x96\xeb\x14J\xca\x8a\x00\\q\xc7J\xe7\xab\x17t\xd1q\x94Ri\x91i\xfe!\x8fX\x87j\xa3G/\xa1\xab\xfa\x8eUb\x07\xae\xd1\x9a\xa3\xa7\xd9\xdbC,\xa5\x95\xa3\xbaG\xc62\x07\xe5\xebZw\xf1\xe1C8\xcf\xd6\xa2\xed\xa7s+$\xee\x8c{\x88\xfc\xe1\x8cd\xd7?\xabie&amp;\x86`\xc7\xcc\x07\x00g\xb5t\x92L\xb2mT\\7v\xab\xad\xa4\xdb\xddM\x03\xcayU\xa7OTUGfq\xb1\xc8\xcd$\x01\xc7;{\xd5\xebf\x05\xa4\xe2\xb6\xee|/\x1c\x97\x1b\xd6M\xaa\x07\xcbM\x87\xc3\xa2\x192$/\xfe\xc8\xefZ\xf2\x98s\x1c\x86\xb7t\x91\xcd\x1a\x9c\x02X\x0c\xe3\xa75\xf3\x87\xc5-I\x06\xadq\x19\xdb\x18\xcf\xfa\xc2\t\xfd\x05}g{\xe0K}Bdig\x95\x08`v\x81U\xd3\xe0\xdf\x86~\xd0g\x9fL[\xa9[\xabM\xf3g\xf5\xa3\x94\xde\x15\xb9\x0f\x88\xfe\x11\xf8N\xee\xe2\xc6\xebZ\xb4\x8eH\xfe\xc3~f\x8d\xa4R\xa8\xeb\xd1\xf1\xf8\x1a\xdd\xd7.n?\xe1%\xf1\x05\x8a\xc8\xc6\xdfR\xb7K\xc8Q\xbf\xbe\xac2?Z\xfbL\xf8\x07F\xfe\xc5:]\xbd\xaf\xd9mp@\xf2\x00\x18\xcdy\xff\x00\x88?f\x9d\x12\xf9\xad. \xd4/!\xb9\xb6\x0e\x16R\x80\x8d\xad\xfc\'\x9eFi\xca&amp;\xb4ks|G\xcf3\xe9\x9b\xb6=\xc0\x08\xac#\x95\xc6z\xe4c\xfaW\xa1\xf8NC\xa5\xdb\xf9jw\x07m\xc0\xfa\x0cRx\xdf\xe0\xcf\x88\xbc?f\x9ff\x8e=N\x15Q\x99"\xce\xe3\xc9\xfe\x1a\x87\xc2\xb0\xdd&lt;qA&lt;m\x0c\xc8\xe02\xba\x90G^\xdf\x85sZ]\x0e\xca\x95 \xe3c\xd15e7\x1aK2\x1c\xbb[\x8c\xe7\xd3\'5\xe7\xdf\x14u\x19f\xd3\xb4\xc8\tQ\x0f\x95\x1e1\xed^\x83y"\xfd\x9eX"]\xec \xdb\xc7\xe3^Q\xe3\xc9\x96K]"\xd2N&amp;\x1cs\xe9\x9a\xadm\xa9\xc5N\xdc\xda\x1f2\xfclYa\xf1\x92(\x19\x1fd\x8c\xfe\xadEj\xfcvd_\x19[\x85\x00\xff\x00\xa0\xc5\x9f\xaeZ\x8a\xc8\xe8&gt;\xa0\xd75\xa3mk{\xd1\x14(b{\xe7\xb5z/\xc2\x9f\x19\x7fj\xda\xc3\xa6\\\x82.\x117\xef?\xc4\xbd\x80\xfdk\xe7\xed[^[\x8f\xedXY\x18\xc5\x1a\';\xfa\xf7\xcfOj\xad\xe3\xaf\x12j:_\x84!\xd4\xb4\xfb\x89-&amp;\x87\xcad\x96\x13\x86^\xc0g\xd3\x9a\xb8\xddj]H\xa9m\xb9\xf6\x1e\xa1\xaeG\xa6\xda\xbca\xd6G\xc1\xe1z\xf3\xed\xedX_\x0b5#4w\xf1O)YR\xe0\xb3\xabz\x1e\x98\xae/\xe1\xbf\x8a\x8e\xbd\xa7\xe9\xb3\xea/\x14\x93\x98\xd7\xcd\x98\xf0\\\x91\xcdwRi1\xda\xeaR]\xda\x8d\x89"\xe4\x95\xe8\xc6\xab\xda;\x9ed\xd7.\xe7o4\x82O\xf5F\x90F\xb6\x96\xae\xee\xd9\x91\xb9\xebYZ}\xf0\xb5\x83.w\x9fJ\xca\xd4u\xa1\x07\xde\xb8\xf3G\xa6\x08\xad\xb9\x91\x04\xba\xaf\x8b\xa3\xd2\xd2i\xa7\x91-\xed\xe3\x19.\xed\x85\x1f\x8dy^\xa5\xfbZxF+\xcb\x9b(\xee\xfc\xf9 Vs\xb4pv\xf2\xc3&gt;\xb8\x04\xfb\xe2\xb9O\xdaSP\xb9\xb8\xf0u\xcb\xd8\xcb\x9f\x97q\x85\x9b\xe4$z\xd7\xe76\xb5\xe3\xedKM\xd5\x1a\xe7P\xd2-\xc7\x9a\xe5#\x8c;\x00H\xe3&lt;75\xacX\xac\x8f\xd7_\x01\xfcj\xd0\xbcj\x7f\xe2]{\x0f\x99\xd4D\xcd\x96\x1e\xa0\xf4\xaf@\x8e\xfb\xed\xd1\xfc\xcc6\xb1\xe3\xd7\x15\xf9W\xfb&lt;\xeb\xba\x8e\xa7\xe3\xa8\x86\x99\xa7\xddX5\xb9\x0b3I)h\xce\x0f\xcc\xdd8\\}k\xf4\x83\xc3\xfa\x83\xdcYG\x99r\xe9\x8c\xb7b1\xda\xb3\xab+;\x1bGE\xa1\xe8\xabm\xb5\xd5\xf3\x91\x8cc5:0E#j\xb7\xfb\xd5\x95g\xa9\x19"PN\x7f\x1a\x9d\xae\xbeS\x81\xfa\xd5s\xe8g-\xcc\x7f\x1a\\YX\xe9\xaby2m\x9a\x17P\xbbN9$\x01Z7\xd2\xc7ub\x1b\x95;G\xcc}k\x98\xf1\xd4gU\xb2\x8d\x02\x90\xaaC0\xcew\x10r)l|B\x9a\xa5\x98\xb4m\xc8\xd9\xe5\x98c\x1e\xd5\xcd)]\x1a\xa4\x95\x8b\xb6q\x9d\xbc\xe0\x85\xce\xe2&gt;\xb5\xb5cj\xad\x19nH\'#5\x9do\x1a\xc6\xc1\x13\x94\xef\x83\x9c\xd6\xe5\x98\xda\x84c\x03&lt;\n\xd2\x8e\xc6u_\xbc,\xab\xb9\x15v\x80)\xb1\xc0\x11\x83\x02A\xab/\x1eTS=\xb1]\x06B\xf9*\xff\x00x\x96\xa5XB}\xc2\xcb\xf45"PW\x14\x05\x88\x02\xed\xfb\xab\xb7\xe9P\xc8\x8c\xcd\x9d\xcd\xc7Nj\xe1P;\xd4e\xf0zV\x97C(I\x0e\xd3\x90\xbdG&gt;\xf5\x9e\xda=\x9c\x92\x16\x92\xd2&amp;bs\xbbo5\xbaX7j\xaf&lt;a\xb6\xe3\x8a\x8b\xa02$\xf0\xdd\x9a\xdb\xcca\x81VG\x19\xdck\xc3\xfe,|+\xba\xbc\x9a\xdfP\xb1\x0f%\xc4\x7f\xf2\xc9O\x07\xf0\xaf\xa1D\x81T\x82\xb9\x18\xc7Z\xa3\xf64\x92lHIBzzT\xca*Hq\xa9\xc8\xcf\xcdo\x8e\x9e\x15\xd5\xe1\xf1\x9c\n\xb0\xee\xff\x00A\x879\x19 \xfc\xd9\x1d}h\xaf\xd0\xbdc\xe1\xbe\x87\xaa^\x19\xa5\xb2\x86F\xc67I\x18c\xd4\x9e\xbf\x8d\x15\xc9\xec\x1fs\xaf\xeb1\xec|a\xab\xe5\xad\xf5\x96\x88\xfc\xaa\x89\xc9\xf6\xcf\xf8\xd4\x9e:\xbbx\xfe\x10\xbe\x02\x1f9!\xe5\x8f&lt;\x1a\xcf\xd65K_\xf8F\xf56\x8ad.\xd1.\x06\xeeO\xbddx\xb3Z\xb7\xbf\xf8k\xa5[\xac\xab#3\xc6\xae\xaay\x185\xa5\xe3\x15u#h\xd5W\xbd\xcd\xef\x0f\xeaZ\x93C\xa5Aox-\x95\xe6\x8dIw\xda1\x8c\x9a\xfb\x13\xc3\x17\xcb&amp;\x93\x05\xb8\x9dn\xb6F\ttm\xc0\xfb\xe6\xbe\x1c\xf8\xa35\xad\xaf\x82\xecg\x87\xe5q P\xaa\xd8\xc8\xc0\xe7\x8e\xdcW\xd0\xff\x00\xb3\xf9\xb9\xd4\xbc\x1f\xa6\xea\x90\xea\x0b-\x80P\x8a\xb1\xa7\x0c\xdf\xc5\xd7\xa1\xfeU\x17\x8c\x96\x865\xac\xeaY\x1e\xc1$\xd2\xac\x87\xa8_z\xabx\xea~\xf0c\xf4#\xfc)\xfa\xaay\x96\xa1\xc3H\xaf\x8e\x95[Hcuk\xbao\x95\xbd\ra\xcc\xccyQ\xc8x\xdb\xc1v\xfe\'\xb2su\xb0!]\x8a\x98#&lt;u&lt;\xf3_\x07|D\xfd\x9c,\x17\xc6\r\x1e\x9d~\xe8Zf\r\x14\xdf6\xc22r\xa7\xdd\x80\x1f\x8d~\x8c^irL\xc2w|\xc6\x84\xe21\xe9\x9e?J\xe1\xee\xbe\x1ei\x1a\xbd\xe5\xb5\xc4\x96`]\xc8\xc5\xc9\xc79\x07?\xce\xb5UZ\x0eTyO\xc0\x1f\x842x\'Iu\x92\xe1\xaeZ\xe3\xad\xd4\x8f\xbd\x83d\x10\x08\xee\xa7\x1c\xd7\xd1\xda,/\r\xa2(\xc6s\xcf&lt;\x0fa\xed\\\xed\xa7\x85\xc6\x91l\xf0\xdb;*\x91\xc6\xee\xd8\xe9Z\xfa|\x93Y\xaa\xbd\xc3\xe1I\x01\xb3\xd8\xf6\xac\xa7UI\xea;3\xb0\xd3u\x01\x1c\xc1\x1c\x9e:\xd6\xe4s\t\x97\xe5\xfdk\x86\xb3\xba\xdftv\x9c\xe7\x91].\x9fp\xdbETj\'\xa0r\xf5f\xb1\xb1Y\xe1\xd9 \x04\xd4m\xa1[\xf9y\x08\xa7\x1e\x83\x15,r\xb1M\xdf\xc3\x9cf\xb4l\xb0\xd1\x91!\xc7\xd6\xb5QR\xd8\x8egs:\xc2\xd1cP\x11p\xbe\xf5\xb1\x14D/\x14C\x0cj\xdc\x11\x8a\xb4\xca06\x9c\x8a\xd6\x9a\xe5\xd0R\xf7\x9d\xd9\x1a\xf3\xc1\xa6:\xfaR\x96\xebP\xc8\xe7\xb7&amp;\xb6&amp;\xc5\x88\xd6\x95\x94\x9a\xaf\x1b\xbf\xa5M\xbc\x9a\t\x1a\xf9\xa8\xfc\xb2\xdc\xd4\xaf\xf3t\xe6\x98\xbb\x94\xf4\xa2\xc0*\xc6Uy\xc5E6\xde\x05I$\x9bW\x04\xe2\xab3n4\xb9J\xb0\x86=\xdd*\x19"l\x1cu\xab*\xc3\xd6\x9a\xd4\xb9Ih\xaa\xa0\x81\xcfZ*b\xa2\x8a\xa1r\xa3\xf1\xe5\xb5\x0f-\x99b\x9eY;\xb4e\x8f\x03\xb0\xa9\xed5Mz%\\\xc2\x12\xce&lt;\xb2\xb3s\x8c\xfbV\x1d\xd4\xa6\xd6&amp;H\xe0"\xf7\x03\xcc\x94/\x1dO\x19\xab\x9f\xdb\x17\x16~I\xda$M\x98+\xcbn?\xd2\xbe"3kfy&lt;\xd3\xeeI\xaex\x82\xe9\xf6E\x18\x9aV\xe0\xb4\x8c\xc4\x8c\x9fA_i~\xc7:\xf4\xf7\xdf\x0f\xee?\xb4n\xc4:n\x8fr\xd1\x86p\x15L\xad\xf3\xe0\xfa\xfd\xec~\x15\xf1\xac\xf6\xf7p\xc3i{u\x1a"\xb0;\x17?t}+\xa9\xbe\xf8\xc5u\xfd\x8f\xa0h6\xb6\xc6\xcfM\xd3\xdf\xcd\x16\xf1\xf5\xbc\x9d\xceK\xca\x7f\x88\x8e1\xe8+\xb3\x0fU\xd3z\xbb\x9d1\xa9\'5+\x9f\xa4W\xda\x85\xae\xa1\x0eb\x94\xcb\xff\x00\\G\x15Qa\x10\xb6\xe3\xc3\xff\x00w\xb5`\xfc(\xb8\x8e\xe3\xc3\xfae\xbf\x9b\xf6\x8b\xd6\xb6I\xae\xa5?t;\x0c\xec\xff\x00\x80\xe7\x1f@\x05t\xba\x97\xcdq\xe4A\xfe\xa8\xd7\xb3\x18\xf3+\x9e\xa4%\xccg\xdc]\xcd\xe6\x16\x8c\x03\x83\xca\xd4r\xea\x9fv\xfaK`\xcbh\t\xf2\xd4u\xf5\xa7\x88m\xb4\xf6\x90\xcd#\'\'\xefs\xf9U+\xad@\xdfZ\xbd\xad\x82\xb7\xcd\xf3\xa3\xf5\xdcGcX\xeaj\x95\xcc[\xcf\x8b\x9alp*\xdbY=\xd0\x99\xfc\xb0G\xfc\xb3$\xf3\x9f\xc34\x96\xba\xf5\xc5\xf7\x88\x1e+\x88\x91-a\n\xcc\xaa9\xdd\x9f\xfe\xbdb\xbf\x87\xe3\xd3n&amp;\x9d\x87\x96-O\x9e\xf1\x8e\x92\xbfR\xa3\xf5\xae\xab\xc2:y\xd5tu\xbc\x916\xcf)&gt;g\xd6\xa6\xd7{\x1a\xf2\xa4\x8d\xfd/Lo1\xe7\x1fw\x92\x07\xb6Et\x16\x8b\xb5j\xa4r&amp;\x8b\x0c\x02^\x13\xbf\xe5Wm\xfc\xb9\xa4Y\x90\xfc\xb9\xc9\xae\xaapV0\x94\x8d\x9d-&gt;\xd1dA\xe3\xf7\x95\xae\xb0\x00qT!\x96\x19\xbf\xd5\x1c\xd5\xa4\xae\xe8\xc5#\x12}\xbbX\x8a\x9d~\xe1\xaa\xebR\x96\xda*\x80\x8b\xf8\xaa\x19\x98\xaa\xe6\xa6i)\x8c|\xc5\xdb@\x11$\xc6\xa6I*\x03\x0e\x18\x1fz\x92\xb3\xe7\x15\x87\xab\x9c\xd4\xb9\xe2\xabC\'\xcdR\xb4\xf1\x0e\x1b\xad\x1c\xe1b;\x8f\xbd\xf8T\x0b\xd4\xd3\xa6\x99X\xfc\xbd*%\x93\xad\x1c\xe3\x1f#mZ\x8f}#6\xe3IG8\x89\xd7\xee\xd1H\xbd(\xa3\x9c,~9\xddi\xb2\xac\xd3M!\xda3\x92\x99\xc0\xfcM#^\x0f\xb2\x877\x1b\x7f\x84l\xc6\x01\xed\x8a\xa9gky\xe2\x0bD\x17\xd3&lt;\x11\x17,\xacx\x0e\x06&gt;Z\x92\xeb\xc2\xc9\x16\xecF\x19\x08\x0c\xb0\x96$(\x1d\xfd\xb3_\x04\x9d\x8f\x1a\xd7$\xba\xb3\x9aY \x8do\x1ai6\x10\xec\xe7;A\xec*\xacm\x1d\x8c\xf1&lt;\xd78\xf2\\\x00\x17\xb7=j\x06Y,#fK_!$\xe0M#\x0c\x9f\xa0\xa6M\xa8-\x9c\x96\xfb\xd05\xd1\xfb\xac\xbe\x9e\xbfZ\x97)^\xe8\xd9+\x1f[\xfc&amp;\xfd\xa4,\xadt5\xb0\x8e\t!\x90\xb9\x86)\\q;n;\xe5&gt;\xa39\xaf\xabt-B\rKI\xb1\xbe\x8dH{\x88\x96M\xad\xdbp\xc8\xfeu\xf9Q\xa4\xeaSi\xfa\xa5\xb4\xf6\xa6H\xc8*\xa4\xa9\x1b\xb1\x9c\x90\x95\xfa\x8b\xe0o\x13i\xfe \xd1\xec\xa7\xb7\x8d\xad\xad\xe1\x868\xb6c\x81\x8003\xfaW\xd2`\xebJQ\xb1\xdbE\xb3B[o\xb61\x89\x86CrM-\xbe\x92\xf6\x96r\xb5\xbck\x19\x8f;B\x8cg=j\xc3[\xcfot S\x90\xc7\xd35\xa9\xa8,\xab\x02[\xc2s3\x90\xae\xc3\xf8A\xae\xe5\x1ec\xad]\x1eg\xa8G\r\xf4\xdePb\xd3\xc0\x1d\xe4S\xc8\xdd\xb4\xf2=\xeb\xb2\xf0\xce\x9am&lt;3\xb8\xb1Yw\x89\x15}\xbb\xff\x00J\xcb\x87\xc2\xa2=R\x13\xb4\xb2\xc5+\x19\x1b?|m&lt;~x\xae\xae\xd65\x92\xed"\x8a2\xdb\x8a\x92s\xc2\x81\x9a\xda0[\x8eR\x1c\xdaj\xea\x8b\x8b\x800\xca8a\xd3\x9e\xb4\xc8t\x9f\xb3]yI+\x08\xf1\xf7A\xe2\x9f\xa8j\xd1\xd9\xdf=\xbc\xc9\x97\x98\x11\x1a\xaf\x18\x00\xaf\xf8\xd2\xc6\x8d\x0c\x92;7 q\xf45\xad\xad\xb1\x8d\xcd=&gt;\xc0\xda\xfd\xc9\x18\xfe5\xb3\x0c\x83\x8c\x8c\x9a\xc5\xd3\xee\x04}\ri\xdb\xb2\xb3d\xf7\xabR@\\\x91\xc62\x06)!\x98m!\xb99\xe34\x8c\x17\x1e\xd5]\xb6F\xe3\xd6\x9f2\x19bPc\xf9\x82\xe75\x12\xc8\xdb\xb1\x8cT\x9fj%p\x18\n\xafqv\xca\x84\xe47\xb6(\xb8\x13\x13U\xe6\x94\x8e\x84\x8a\x83\xfbA\x9b\x82\xbcTS\\\n\xce\xc2\xb9&lt;Ls\xd4\xd4wM\xb3,j\x18\xefPL\x17&lt;U\xb9\xa3\x17\x91H\x02\xf0:\x1c\xd1a\x99/\xa9\x15\\/L\xd5\xfb{\xaf:\x15;p}k\x9b\r%\xbd\xc4\x91H~Q\xf3\x0e+R\xd6\xf3t\x0b\x83\xcey\xa4+\x9al\xd9\xe9NNj\xaa\xcd\x9csVco\x97=\xe9\x0c\x9dP\xe2\x8ab\xcc\xd8\xebE\x00~:\xebV3I\x1d\x8d\xbe\xff\x00%\xa3\x02P\x8c\xd8U\xf5\xfe\x95n\xf2\xc6]J\xceW\xb7\xbd\xf3o\xc0P\x1a7\x01\x119\xeb\xebY:m\xec\x9a\xacM\x01\x0bjK\x90\xc9\xb7?Q\xf5\xe9[\xf6\xadp\xda]\xcd\xb5\xb6\x91q5\xbd\xba\x9c\xb2\xc5\x8c\x83\xdc\xb7J\xf8V\x9d\x8f\x1e;\x9c\xcd\x8f\x87\xe2\x13;j\x91\xe6(\xfed\x9d\xe4\xc9\xdd\xe8\x07\xa5&gt;\xce\xd1\xaf.^;{?2,\xe0\xb8\x04\xaa\xfa\x1c\x9a\xb1\xa2\xe9\x97\xfa\xc2\xf92F\xd6zr8\xf3\xae&amp;\x00yJ{}N)\xde(\xf1\x17\x87\xfc\'qoic\x13M\xa9:~\xf1\x9aL*\x8e\xc4\x8f\\RQ\x94\xb4F\xb7DVa\xa1\xbe\x9a\xca+\t/\x18s\xba\x04\xdd\x8f\xcb\xa5}\x8d\xfb;\xfcY\xd1l\xfc/\r\xa5\xd5\xe5\xbe\x99\x1d\xbb\x96\x96\x1b\x9b\x95i\xa4px\x013\xbb\x19\xf6\xaf\x85!\xf8\x85t\xb7\x86\xd3L\x81\x9b\x073Ily?\x88\xab\xd3x\xa2ky\xad\x16\xc6\x13\x00\x91w\\\x05m\xb8\'\xb6{\xd7\xa3\x85\x94\xb0\xfb\x9asr\xec~\xb7xW\xc4Vz\xcc\xd2O\x1d\xdc\x173F\x99\xd9\x1c\x80\xfd2;WT\xd0\x9bt\x90\xaf\xcf\xe6|\xc5\x9b\xa8\xf6\xaf\x8e?c_\x1bXIc$s\xcf\x1cw\xf7\x13\xf1\x14\x88T\xec\xea\xbbs\xc9\xed\xd2\xbe\xbb\x92\xe9\x93E\xb8\x99Iu\xc6\xd0H\xc1\xcf\xe3_KF\xa74nv)6T\x96\xea+;v\xf3\x1c*\xe7 \xf7\'\xaf\xf3\xac\x1f\x10|B\xd3\xfc#k$\xf7\x13\x88\xee.2\xa2\x18\xf9p\x060\x07\xd4\x91Qk\xb7r[\xf8&gt;\xee\xe1\xd4HC\xaa\xae}k\xcf\xf4]\x1a-cT:\xb6\xb8\x15DM\xb9-\xdb\xa3\x03\xc0\xfdp\x7f\n=\xa5\xcb=?\xc0\xb7M\xe2\x0b;}CP\x8fm\xcc\xc5\xdd\x15\xba\xacg\x1b\x7fQ]\x05\xcd\xb0\x9a\xf26Y\x18&lt;jG\x97\xd9\x87\xadq\xd6&gt; k\x8dJ|mKkx\xd5!\x0b\xc2\x8f\xa5uQ\xde\xa4\xb6/&lt;m\xfb\xf5Q\xbb\xe8\x7f\xcf\xebW\x19shK%\xb3\xdf\xe6\xed\xadh&amp;) S\xd2\xb9m&gt;\xf2Y&amp;f\xce\xdd\xbd\x8fz\xdf\xbar\xb1E(\xe7p\x1d*\xd8\xd1\xba\xcc\xb9\xc6\xee*\xbd\xcca\x98\x10\xc7\xa5V\x8b{*\x9c\xf5\x14\xf7\xb8\xf2\x18\x06Vl\xf3\x91R\xc6Gq\x0c\xae\x80FNEdMqs\x04\x98~+Z\xe2\xf8,{\x91\xc2\x95\xe4\x83\xde\xb8\x9f\x12\xea\xf3Gu\x14\xa8\xdedDe\x82\xff\x00\x08\xf7\xa8\xe7\x03\xa2[\xed\xeaJ\xc8X\xa8\xc9\x15W\xfbTM.\xd3\x84\x1e\xe6\xb0\xacu\xc8yh\xdb\xa0\xc9\xcfq\xde\xb9\x9dK\xc4q\xea\x97{ac\x1b\x13\x8cg\xdf\x1f\xd6\x8eqr\xb3\xb0\xfe\xd8T\xd4\x96\xd9\x98\t[\xee\xf3\xc1\xcd[\xd6\xbcI6\x8f\x19\x0c\xc5co\x94?`}\xeb\x89\xbc\xc6\xa5\xa5\xc1qo i\xa1c\xb5\xc1\xe8\x7f\x88\x1a\xcc\x9b\xe2\x15\x9e\xad\xa6\xdd\xc3\xa9L\xb1\xc9jD \x1e\x8d\x9e\x87\xfc\xfaR\xf6\x85\x1dm\x9e\xb4\xad2\xc7,\xe2Ifb\x01\xcf\xf2\xad\xcb\x02\xf13\x83\xccy\xc0o~\xf5\xf3\xa6\x9f\xae\xdc\xae\xb4\x11]\xd1`\x90\xb2\x16\xfe\xe9\xef\xfaW\xb7\xf8\x7f\\\xfbe\x92\xee8 \xe7\x9e\xf9\xefZ\'\xa5\xcc\xef\xad\x8e\xd6\xdd\xb7c\x9a\xbe\x9f,d\xd6\x1e\x9bp\x1eA\xd7\xa5om\xc4`\x7fz\x8b\xa2\x85V\xca\xd1B\xa9QE\x17C?\x1f\xb5Y\x06\x97o{y-\x94F{t\xd9\x04\xbb\x8f\x96\xeb\x9cd\x1e\x84\xd6V\x9f\xabj^M\xac\x13G&lt;/"\x99\x03$\xb9\x8e@O\x03\x03\xa9\xe0\xd5\xd6\xd2n\xf6\xd9Iv\xef\r\xbb\x10\x8b\xe7H\xa7\x18\xdd\xc63\xd3\x93Zz\xd6\x9b\x1c\x9a-\x9cwW\x10*\x06ti\x15\x19\x9a@\x08)\xb3\x03\x1cs\x93\x9a\xf8\xdb_C\xc6\x12\xf2\xe9\xb5\x0bs\x05\xc2o8Pn%;C\x9e\xc0\x81\xd7\x1d\x8f\xd6\xb3`\xd2g\xd3\xf5C\xa8\x9b\x11*\xdc\x9f)\x0c\xf1\xf0\xcf\x8cdn\xe8\x07\xbdX]H\xc0\xb6\x8eda\x05\xbb\x84\xf3-\xad\xdd\xcb\x93\xd0d\xae\x01\xf6&amp;\xa1\xd4\xed\xe4\xd5#y\xe3\xba\xbe\x8d\x95\x9eC\xbf\x90\xa3\xd3\x83\xb5O\xe3\x9a\xcd\xbe]\x8a3o\xa0k4\x95\x05\xa3\xc3{1\xdb!\xb7\x8f*\x17\xd7+\xc7J\x91\xbc%s\x1d\xb4766rE\x16\xcd\xf2]\xdd\xf0\x9d3\xc0&lt;\x9f\xca\xac\xc7\xa5\xb4\xd6v\r\xa5Eu\xa9My\x9f6w\'\x11`\xf5*9\xc7\xbdE}\xa5\xdc\xcb\n\xc5w\xbd\xc0Q\xbc\xbc\x80\xc7\xbb\x1d\x89 \x9f\xca\xab\xde4:_\x02\xf8\xba\xeb\xe1\xa6\xa9m\xacG(\x92\xeaE\t*\xb4yfQ\xd0*\xf5Q\xef\x8a\xfb[\xc0_\xb4\r\x8f\x8d4\xbbHD\xd1ZC\x01\xc3\xc5\xd0\xee\x1fw \xf3\x83\xeak\xe0/\x10\xe8\xd6"h\x1a\rUg\xbc*\x01\xb7\x8a#\xb1F:~\x156\x89\xae\xdfxZ\xfa&lt;_\xb5\xdc\xb2\x0c\x0bX\x1b &amp;~m\xdbs\x83\xdb\x07\x9ek\xd1\xc2\xd7\x95=\x19q\xa8\xcf\xd3yuX\xf5\x8b[P\x8c\x92Z\\\x1d\xea\xa1\x86\x0e;\xfd++Z\xb9\x86\xda\x19\x03\xa1g\x0c\x00\x00p\x06\rxO\xc1\xff\x00\x8eW\x93x\xa3G\xb1\xf1\x0bG\xa7Z\xdd\xc6\xe9\x15\xb30a\x18\x03\n\x07\xa7^\xf5\xf4F\xa5\xa2\xac\x92I+K\xe6F\xaa\x08\x1e\xa0\xf4\xafIT\xe6\xd8\xee\x8c\xb9\x95\xce+\xc4\x9a\xdd\xc6\x8b\x0c&amp;\x14\xc4M\x119\x04r\xc7\x8c~\xb5\xd6x\x1fR\xb9\x86\xc6)\xee\x18\xb3\xde\x00Z\x16\xea\x98\x18\xe9\xf8\x83\\\xf5\xcc1\xcdu\x02\xdc\xc7\xe6E\x03\xef\xdb\x8f\xbd\x8e\xd5\xd0i6\xed}j\xd3F\x7fx\xc3f\xe1\xfc&lt;\x93\x8f\xcb\x15\xbd9&gt;a\xb3\xafi\x16\xdfQ\x8a%a\xf3\xf2px\xae\xa6\xd5D\xd6\x841\x1f)\xe3\xe9\\%\x9e\x83p\xbaso\x9b|\xeb\xf3)\xcf?J\xda\xb2\xbf\x9a\xcdbW\xc9,\xa3+\xf8WU\xee\xc1\x1d\\,$Q\xb7\x90)\x97\x97\x0b\x1c|\x90\x018\xcf\xbdP\x86\xf8\x86bF\xc1\xe8\xdcV~\xa1\x7f\n\xc5p\xf3\xb7\xeeU2H\xe8=\xe9I\xe82\xae\xad+C\xbbk|\xc4\x11\x8c\xfbW\tc\xac\x18\xef\x1a+\x93\x98%&gt;Qn\xa07\xa7\xb5g\xfcB\xf8\xb3\xa3\xf8\x12\xe2\tu+\xd4]\xf1n\x8fk\x06\xca\x8fn\xe6\xbc\xb1~1[|E\xfbJxJ\xd1\xee\xa3\xc8\x91\xee\xa6\x05\x10\x10y\xeb\\2\x9e\xa1\xbe\xc7\xa0x\x97\\\xb6\xf0\xda\xdd2]&amp;\xc4\x0c\xd8-\x8203\xd3\xd3\xdf\xa5q\x9a\x1f\x89l\xbcE\xadE-\x9d\xfc|K\x19e\r\xd0\x16\x1c\xff\x00\x9fJ\xf1\xedc\xc0\xbe:\xd4\xbcC1\x13C$\x97\x11H\x07\x99.\x02)S\xc0\xcf_J\xea\xfe\x10|\t:\x0e\x96.u\xcdXK\xabHC\xa2\xdb\x93\xb2\x16\x00\xf5\xf7\xc6G\xa74\xb9\x83\x92g}\xab|L\x1e\x1b\xd5/m\xf4\xe3\xe71r\xfbYH\x8c\xf23\x83\xef^}\xabx\xda+\xdb\x88\xee\xda\xdc\xab\x10\xcb4&gt;\xfc\x95&gt;\xfd\x7fJ\xed&lt;E\xe1\x8bh!\x91$`v\x8c\x87\xcf9\xaf8o\x0f\xc9up\xf3\x15;"8&lt;pk&gt;c\xa7\x94\xd9\xb3\xf1\xa3\xe1.DL\xe4(S\xf2\x9e}\xbf\x0f\xeb^\xad\xf0\xf7\xe2\x05\xbe\xa4\xd0Zy\xb8\x99x\xda\x01\xce+\xc6\xec#\x92\xe22\xb6\xc1|\xbc\x9c\x8f\xe7]g\xc3\x9d;K\xb5\xf1\x12\xdc4R\xc9x\xbd\n\xb6\x11}r\x7f*\xb8Um\xd8\xc6P\xb6\xa7\xd4\xda|\xdb.\xa2Rz\xaeq]?\x9e\xbbPg\x9a\xf3\r\x07]\xb8\xb8\x9eA$\x06\r\xac\x17\xe6\xea{\xf1]\xfc,\xed\x021R\x0e8\x04Wb \xd6X\xdd\x86@\xe3\xebEU]A\x15@i\x15O\xa14S\x03\xf2.m;u\xe5\xb4\xa7ZIV?\xde\xc9n\xad\xe5\xba\x1c}\xdd\xd2mQ\x81\x9f\xce\xa5\xd7\xac\xec. \x8ei\xe1\x90\xc6\xf1o\xb6\xb8\x99N\xc3\x93\x8d\xa3\xbfQ\xd4\x0cU\x0b\x89,d\xdfnnM\xc5\xc6Df) \x12G!\xc6T!\xdc\xb9&lt;\x1f\xa6\x05X\xd7n\xe1K{\x1f?Q\xba\x11\x8f.(\xed\xd6\xd3~\xdcn\xdc7+\x1d\x9c\x93\xc6\x0fN\xd5\xf2\x08\xf1Q=\xd5\xfd\xd5\x9e\xa9\xa6X\xc9t\xb2\xc1\x08\x12\xc3\xa7\x98\x9bb\xb1\x1c\xe7\x03\x1c\xe79\xcf\xd7\x18\xad\xd5\xb1\xd1\xa4\xd1\xcd\xcd\xd1\x9a\xf6H\xd8\xaf\xd8\xa1\x8c\xac,I\'98\x07\x93\xd8\xf4\xc5r:n\x9buq\xab\x03-\xb5\xc3B\xce\xc2&amp;\x90|\xe4q\x83\xd7$c\x07\xb7Z\xd9\x86\xe9l.&amp;Y\x92e6\xed\x80\xeb\x80\xbb\x87R\x14\x16o\xcc\n\xce[\x94[\xfe\xde\xd6\xf4\xed\x06K8\xac!\xd3-U\x97\xed\x13\xc7\x1f\x16\xaa\xdc\x85f8-\xc1\xe8\xa0\xd7\x19\xa8k\xb1\\M2Ac.\xa2\x88\xfeZH\xcaT\x9e\xd9\xc7\xeb]\x0e\xa95\xef\x88-\xedmH{hY\xf1$RI\x89]\x87\xf1|\x81\x861\x8e\xb8\xf7"\xabGo\xac\xd8\xda\xc3\xb2\xc9\xb4\xdbY\x18\xa7\x9c\x88\xad#&amp;\xdc*\x06\xdd\x81\x9f_z\xda Rm\x0e\x15\x92\xd9n\xd4Y\xc5\xbc\x16\xfd\xd3\xe0\x9fB\x00&lt;\xe7\xa9%G\xbd3I\xfe\xcc\xd2\xeee\xba\xd3\xac\x01\x95\x07\xee\xf9\x04\x92\x0f9\x19\xebO\xd4/d\x8d%\xb9\xd5a\x92\xf2+\x82TG\'^\x98\x01]I\x07\x9e\xbcg\xf9\xd4^\x0b\xf0n\xa7\xf13\xc5\x96ZO\x87\xf4\x8b\x89&amp;Y\x03,\x93\xcd\xb6\x0bt_\xe2s\xb7\xfd^q\xef]1\x8a\x97\xc2\\_6\x85\xc8f\xd5/5\x11\xaa^\xdfI\xa4B\xac\xce\xe94_\xbdp\x01\xe0(\xc9\x03\x1d\xfe\x95\xfa\'\xf07Uo\x14|)\xd2/n\x92S,\xd0\xff\x00\xac\x98\xe4\xb0\x1cp}:W\x91x_\xf6\x0e\xd1\x1aO\xb4x\x8f[\xbf\xd5\xaf\x19\x03I\xe4\x01\x15\xbe{\xa8\x05\x89\xc5}\'\xe1\x1f\x0b\xe9\x9e\x07\xd0-4=.\x11\x1d\xack\x85\x1b\xb7v\xae\xec=9\xd3|\xc7\xa5J\x9c\x92\xbb\xd8\xe2\xbcY\x1a\xd9\xcd\x0cq\x0f\x9d\x8e\x05t\x1f\x0f\xf4\xf9\'\xb6$s\x142\x11\xfe\xf1"\xa7\xd7\xb4(\x05\xec\x92Jr|\x82@\xf7\xcdnx\x0eh\xa3\xd1\xe2G\x8c\xa8f;\x8e?*\xef\xa7~{\xb3\xa6v\xe8i5\x9f\xd9\xaa\xbc\xd1\xad\xc4\x81\xa3\xfb\xcb\xd6\xba\x1b\xabX\xee-\xf8nk.\xdfLM\xaf\xf3w\xae\xd6s\xad\xca\xe6B\x1b2\xd6\x7f\x88.\xa0\xfe\xcb\x9cD\xaav\xae\xe7%I\xc0\xf5\xc5[\xbe\x88Z\xf9d#\xb9\xfa\xd7\x94\xfcr\xf8\x81s\xe1\x1f\x87:\xf5\xecW\x11\xe8\xfbbe\x17\xd2\xf2U\x88\xe1PwrzW,\x9d\x8b&gt;\x03\xf8\xe1\x7f{y\xe3m{I\x9bPYt\xab\x1dFh\xe2\x94\xb1\xe8\x1c\xf1\x93\xd0\xe7\xa8\xeck\xd1~\x03\xfcX\xb5\x86\xca\xefK\xd9kk\x12\xae\xcbh\xd0\xfc\xee;\x9fz\xf9\xda\xe3e\xf0\x9a{\x9dJk\x89\x99\xcc\x85fBH9\xdc[\x8e\xa4\x9e\xbfZv\x97k{ou\x1d\xe5\x8d\xa7\x9a\xa0e\xa4RI\x89\xba\xf3\xd0-y\x0e~\xf39\xa1W\x92Z\x9fy&gt;\xb5\x1c\xd6QH\x0e$T#\xfd\xa1\x91N\xd2n\xa5\xb1\xb3\x96\xeei\xbfu_\x1bY\xf8\xd7\xc4\xb6\xb2o:\x84\x85\\\x81\xfb\xbc0C\xd8\x93\xbb\xa0\xee\x05i\xe9_\x17\xbcA\xa7\xdb\xc1\x15\xfe\xa1\xf6\xd6V&amp;(`\x8c\x95c\xfe\xd15\xacj\x9d\xbfZ\x81\xf5=\xde\xa5s\xa8N\xb8` \xec\x1f\xaf\xe3VZk]?O\x90L\x86+yv\x8f1\xba.OR{f\xbeI\xf1\x17\xc7\x8f\x12]K\x135\xec\x16\xbb[\xcc\x11\xc7\x1b\x1c\xe3\xb6G?\xa5b\xdf|`\xf1\x16\xbc\xd3Z_kW1\xc59\xf9\xa0\x82&gt;\x83\xd8\x0c\xfe\xb5\xb4\xa5\x13\t\xd6\xe7&gt;\x82\xd6&gt;!h^\x15\xd7\xaf\xd6\xf6\xf2-:H\xe3"\x15\x94\x12\xad\xd3\x04m\xc9\xe7&gt;\x9d\xaa\x9f\x81\xfe/iz\xb4e\xa5\xd4"I|\xf2^fR\xaa\xa8\x00\xe1{\x92q\xdc\n\xf9wR\x99\xae\xa6eG\x90\xb2p$\xb9Pr=N[\xadR\x87\xc4\x1f\xd9\xd7\x11+\xc8\xd1\x84m\xcf(Q\xb3\x03\xb7\x07\xbdgM\xca\xfa\x19{o\xb2~\x99\xf8+\xe2\xe6\x8fyk\x1c\x97/-\xaf\x99\xfe\xa9\xa7\x85\x89\x7f|z\x11\x8e}+\xd9\xf4\x0f\x12Y^[\xc6\xe9:\x93\xd5\x15X\xe3\xf5\xaf\x8e\xbe\x10\\\\|N\x8a\xc7X_\xf8\x95Y\xc3\x12Ao\x0b&amp;|\xdc\x0eX\x8a\xfa\x8f\xc0\x9a-\xdch\xca\xc2\xd9\xa3V\x1bX\xa9\x0c\x07\xf0\xe3\xdf\x18\xafF7\xeak\x1d\x8fG\x9a\x18.XH\x9d\n\x8c\xfdh\xac\x81=\xdd\xbec\xdb\x9c\x1a)\x94~S\xcf\x7f\xa6Ie,B\xd9b\xd4\x9aEf\xb8yw\xa8\x8cg\xe5\xf2\xd4q\xce\xdeCw\xc5hC\xf6ThE\xed\xc4\x9atLD\xe8\xb1\xdb\x99\x061\x8d\xc4dl\xdcA\xe0\x93\xf7A\xeek\x9c\xb8\xb0\xd2l\xee\x12\x08\x17R\x92\xf6c\xe6\tv\x83\x18^\xfb\x88\x1fA\xc6z{V\xae\xadh\xbajE\r\xb2\xdc^\xb4\xf1\x0c\x9bt8\x81\x06K#;\xbf&lt;\xe0\xe7oC_\'\xca\xaf\xb9\xe2\x9aK\xe2I\xa2&gt;N\x8bc!\x8d\xb2\x05\xcc\xa44\xa1\x89\xe4\x81\x9c`\x8cc\x9f\xe5U[PK;\x85\x8b\xc8\x91\xef\xd1\x8b\xb2\xa0\\\x12;\xb3\x16\xe4\xe3\x9c{\xd5\x1b;\xc8.l\x05\xf5\xe1\xbe\xb8\x90\xb7\x97\x14V\xaa\xb1B\xcb\x8e\x9dI\'\xdf\x8f\xa75%\xacoof\xb7\x1fh\xb5E\x90\x97H\xd8\x99'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220905 14:27:27.560" level="INFO">POST Response : url=https://petstore.swagger.io/v2/pet/15/uploadImage 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:28 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"additionalMetadata: null\nFile uploaded to ./lovely_dog.jpg, 11866 bytes"} 
 </msg>
<msg timestamp="20220905 14:27:27.560" level="INFO">${response_body} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:27.147" endtime="20220905 14:27:27.560"/>
</kw>
<kw name="Then Validate the response schema with reference schema" library="DataChecker">
<arg>input=${response_body.json()}</arg>
<arg>ref_path=${GLOBAL_SCHEMA_RESP_UPDATE_PET_IMAGE}</arg>
<kw name="Get Reference Json" library="Validate_json">
<var>${ref}</var>
<arg>reference_schema_path=${ref_path}</arg>
<msg timestamp="20220905 14:27:27.590" level="INFO">{'code': 200, 'type': 'unknown', 'message': 'additionalMetadata: null\nFile uploaded to ./lovely_dog.jpg, 11866 bytes'}</msg>
<msg timestamp="20220905 14:27:27.590" level="INFO">${ref} = {'code': 200, 'type': 'unknown', 'message': 'additionalMetadata: null\nFile uploaded to ./lovely_dog.jpg, 11866 bytes'}</msg>
<status status="PASS" starttime="20220905 14:27:27.561" endtime="20220905 14:27:27.590"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${input}</arg>
<arg>${ref}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:27.591" endtime="20220905 14:27:27.592"/>
</kw>
<status status="PASS" starttime="20220905 14:27:27.560" endtime="20220905 14:27:27.592"/>
</kw>
<tag>API</tag>
<tag>API_PET</tag>
<status status="PASS" starttime="20220905 14:27:27.144" endtime="20220905 14:27:27.593"/>
</test>
<test id="s1-s1-s2-t3" name="API_TS002_Test_3: Get the pet from id" line="29">
<kw name="When GET" library="RequestsLibrary">
<var>${get_response_body}</var>
<arg>url=${API_URL}/pet/${pet_id}</arg>
<arg>expected_status=200</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:27.981" level="INFO">GET Request : url=https://petstore.swagger.io/v2/pet/15 
 path_url=/v2/pet/15 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220905 14:27:27.981" level="INFO">GET Response : url=https://petstore.swagger.io/v2/pet/15 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:28 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"id":15,"category":{"id":1,"name":"dog"},"name":"doggie","photoUrls":["//dog.jpg"],"tags":[{"id":0,"name":"white"}],"status":"available"} 
 </msg>
<msg timestamp="20220905 14:27:27.981" level="INFO">${get_response_body} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:27.594" endtime="20220905 14:27:27.981"/>
</kw>
<kw name="Then Validate the response schema with reference schema" library="DataChecker">
<arg>input=${get_response_body.json()}</arg>
<arg>ref_path=${GLOBAL_SCHEMA_RESP_GET_PET}</arg>
<kw name="Get Reference Json" library="Validate_json">
<var>${ref}</var>
<arg>reference_schema_path=${ref_path}</arg>
<msg timestamp="20220905 14:27:27.984" level="INFO">{'id': 15, 'category': {'id': 1, 'name': 'dog'}, 'name': 'doggie', 'photoUrls': ['//lovely_dog.jpg'], 'tags': [{'id': 0, 'name': 'white'}], 'status': 'available'}</msg>
<msg timestamp="20220905 14:27:27.984" level="INFO">${ref} = {'id': 15, 'category': {'id': 1, 'name': 'dog'}, 'name': 'doggie', 'photoUrls': ['//lovely_dog.jpg'], 'tags': [{'id': 0, 'name': 'white'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20220905 14:27:27.983" endtime="20220905 14:27:27.984"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${input}</arg>
<arg>${ref}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220905 14:27:27.985" level="FAIL">{'id': 15, 'category': {'id': 1, 'name': 'dog'}, 'name': 'doggie', 'photoUrls': ['//dog.jpg'], 'tags': [{'id': 0, 'name': 'white'}], 'status': 'available'} != {'id': 15, 'category': {'id': 1, 'name': 'dog'}, 'name': 'doggie', 'photoUrls': ['//lovely_dog.jpg'], 'tags': [{'id': 0, 'name': 'white'}], 'status': 'available'}</msg>
<status status="FAIL" starttime="20220905 14:27:27.984" endtime="20220905 14:27:27.985"/>
</kw>
<status status="FAIL" starttime="20220905 14:27:27.981" endtime="20220905 14:27:27.987"/>
</kw>
<tag>API</tag>
<tag>API_PET</tag>
<status status="FAIL" starttime="20220905 14:27:27.593" endtime="20220905 14:27:27.988">{'id': 15, 'category': {'id': 1, 'name': 'dog'}, 'name': 'doggie', 'photoUrls': ['//dog.jpg'], 'tags': [{'id': 0, 'name': 'white'}], 'status': 'available'} != {'id': 15, 'category': {'id': 1, 'name': 'dog'}, 'name': 'doggie', 'photoUrls': ['//lovely_dog.jpg'], 'tags': [{'id': 0, 'name': 'white'}], 'status': 'available'}</status>
</test>
<test id="s1-s1-s2-t4" name="API_TS002_Test_4: Delete the pet" line="33">
<kw name="When DELETE" library="RequestsLibrary">
<var>${delete_response}</var>
<arg>url=${API_URL}/pet/${pet_id}</arg>
<arg>expected_status=200</arg>
<doc>Sends a DELETE request.</doc>
<msg timestamp="20220905 14:27:28.384" level="INFO">DELETE Request : url=https://petstore.swagger.io/v2/pet/15 
 path_url=/v2/pet/15 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20220905 14:27:28.384" level="INFO">DELETE Response : url=https://petstore.swagger.io/v2/pet/15 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:29 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"15"} 
 </msg>
<msg timestamp="20220905 14:27:28.384" level="INFO">${delete_response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:27.989" endtime="20220905 14:27:28.384"/>
</kw>
<kw name="Then Validate the response schema with reference schema" library="DataChecker">
<arg>input=${delete_response.json()}</arg>
<arg>ref_path=${GLOBAL_SCHEMA_RESP_DELETE_PET}</arg>
<kw name="Get Reference Json" library="Validate_json">
<var>${ref}</var>
<arg>reference_schema_path=${ref_path}</arg>
<msg timestamp="20220905 14:27:28.390" level="INFO">{'code': 200, 'type': 'unknown', 'message': '15'}</msg>
<msg timestamp="20220905 14:27:28.390" level="INFO">${ref} = {'code': 200, 'type': 'unknown', 'message': '15'}</msg>
<status status="PASS" starttime="20220905 14:27:28.389" endtime="20220905 14:27:28.390"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${input}</arg>
<arg>${ref}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:28.390" endtime="20220905 14:27:28.391"/>
</kw>
<status status="PASS" starttime="20220905 14:27:28.386" endtime="20220905 14:27:28.392"/>
</kw>
<tag>API</tag>
<tag>API_PET</tag>
<status status="PASS" starttime="20220905 14:27:27.989" endtime="20220905 14:27:28.392"/>
</test>
<test id="s1-s1-s2-t5" name="API_TS002_Test_6: Add a ped non-invalid keys and values (Negative Test)" line="38">
<kw name="Given Get reference json" library="Validate_json">
<var>${send_body}</var>
<arg>reference_schema_path=${GLOBAL_SCHEMA_SEND_INVALID_PET}</arg>
<msg timestamp="20220905 14:27:28.394" level="INFO">{'test': 15, 'invalid': 'Hello World'}</msg>
<msg timestamp="20220905 14:27:28.394" level="INFO">${send_body} = {'test': 15, 'invalid': 'Hello World'}</msg>
<status status="PASS" starttime="20220905 14:27:28.393" endtime="20220905 14:27:28.394"/>
</kw>
<kw name="When POST" library="RequestsLibrary">
<var>${response_body}</var>
<arg>url=${API_URL}/pet</arg>
<arg>json=${send_body}</arg>
<arg>expected_status=405</arg>
<doc>Sends a POST request.</doc>
<msg timestamp="20220905 14:27:28.846" level="INFO">POST Request : url=https://petstore.swagger.io/v2/pet 
 path_url=/v2/pet 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '38', 'Content-Type': 'application/json'} 
 body=b'{"test": 15, "invalid": "Hello World"}' 
 </msg>
<msg timestamp="20220905 14:27:28.846" level="INFO">POST Response : url=https://petstore.swagger.io/v2/pet 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:29 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"id":9223372036854380336,"photoUrls":[],"tags":[]} 
 </msg>
<msg timestamp="20220905 14:27:28.847" level="FAIL">Url: https://petstore.swagger.io/v2/pet Expected status: 200 != 405</msg>
<status status="FAIL" starttime="20220905 14:27:28.395" endtime="20220905 14:27:28.848"/>
</kw>
<kw name="Then The response should have correct data" library="DataChecker">
<arg>expected_value=${response_body.json()}[type]</arg>
<arg>actual_value=error</arg>
<status status="NOT RUN" starttime="20220905 14:27:28.849" endtime="20220905 14:27:28.849"/>
</kw>
<kw name="And The response should have correct data" library="DataChecker">
<arg>expected_value=${response_body.json()}[message]</arg>
<arg>actual_value=Invalid input</arg>
<status status="NOT RUN" starttime="20220905 14:27:28.849" endtime="20220905 14:27:28.849"/>
</kw>
<tag>API</tag>
<tag>API_PET</tag>
<status status="FAIL" starttime="20220905 14:27:28.392" endtime="20220905 14:27:28.850">Url: https://petstore.swagger.io/v2/pet Expected status: 200 != 405</status>
</test>
<test id="s1-s1-s2-t6" name="API_TS002_Test_7: Get with non-existed pedId (Negative Test)" line="44">
<kw name="When GET" library="RequestsLibrary">
<var>${response_body}</var>
<arg>url=${API_URL}/pet/${nonExisted_pedId}</arg>
<arg>expected_status=404</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:29.251" level="INFO">GET Request : url=https://petstore.swagger.io/v2/pet/787878446790 
 path_url=/v2/pet/787878446790 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220905 14:27:29.252" level="INFO">GET Response : url=https://petstore.swagger.io/v2/pet/787878446790 
 status=404, reason=Not Found 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:30 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":1,"type":"error","message":"Pet not found"} 
 </msg>
<msg timestamp="20220905 14:27:29.252" level="INFO">${response_body} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:28.851" endtime="20220905 14:27:29.252"/>
</kw>
<kw name="Then The response should have correct data" library="DataChecker">
<arg>expected_value=${response_body.json()}[type]</arg>
<arg>actual_value=error</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_value}</arg>
<arg>${actual_value}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:29.254" endtime="20220905 14:27:29.255"/>
</kw>
<status status="PASS" starttime="20220905 14:27:29.252" endtime="20220905 14:27:29.256"/>
</kw>
<kw name="And The response should have correct data" library="DataChecker">
<arg>expected_value=${response_body.json()}[message]</arg>
<arg>actual_value=Pet not found</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_value}</arg>
<arg>${actual_value}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:29.257" endtime="20220905 14:27:29.258"/>
</kw>
<status status="PASS" starttime="20220905 14:27:29.256" endtime="20220905 14:27:29.258"/>
</kw>
<tag>API</tag>
<tag>API_PET</tag>
<status status="PASS" starttime="20220905 14:27:28.850" endtime="20220905 14:27:29.259"/>
</test>
<test id="s1-s1-s2-t7" name="API_TS002_Test_8: Not possible to add a pet with undefined status different than available,pending,sold (Negative Test)" line="49">
<kw name="Set To Dictionary" library="Collections">
<arg>${send_body}</arg>
<arg>status=${invalid_ped_status}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20220905 14:27:29.261" endtime="20220905 14:27:29.262"/>
</kw>
<kw name="When POST" library="RequestsLibrary">
<var>${response_body}</var>
<arg>url=${API_URL}/pet</arg>
<arg>json=${send_body}</arg>
<arg>expected_status=405</arg>
<doc>Sends a POST request.</doc>
<msg timestamp="20220905 14:27:29.695" level="INFO">POST Request : url=https://petstore.swagger.io/v2/pet 
 path_url=/v2/pet 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '157', 'Content-Type': 'application/json'} 
 body=b'{"id": 15, "category": {"id": 1, "name": "dog"}, "name": "doggie", "photoUrls": ["//dog.jpg"], "tags": [{"id": 0, "name": "white"}], "status": "unavailable"}' 
 </msg>
<msg timestamp="20220905 14:27:29.695" level="INFO">POST Response : url=https://petstore.swagger.io/v2/pet 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:30 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"id":15,"category":{"id":1,"name":"dog"},"name":"doggie","photoUrls":["//dog.jpg"],"tags":[{"id":0,"name":"white"}],"status":"unavailable"} 
 </msg>
<msg timestamp="20220905 14:27:29.696" level="FAIL">Url: https://petstore.swagger.io/v2/pet Expected status: 200 != 405</msg>
<status status="FAIL" starttime="20220905 14:27:29.262" endtime="20220905 14:27:29.696"/>
</kw>
<kw name="Then Should Not Be Equal As Strings" library="BuiltIn">
<arg>first=${response_body.json()}[status]</arg>
<arg>second=${invalid_ped_status}</arg>
<doc>Fails if objects are equal after converting them to strings.</doc>
<status status="NOT RUN" starttime="20220905 14:27:29.697" endtime="20220905 14:27:29.697"/>
</kw>
<tag>API</tag>
<tag>API_PET</tag>
<status status="FAIL" starttime="20220905 14:27:29.260" endtime="20220905 14:27:29.698">Url: https://petstore.swagger.io/v2/pet Expected status: 200 != 405</status>
</test>
<status status="FAIL" starttime="20220905 14:27:26.614" endtime="20220905 14:27:29.699"/>
</suite>
<suite id="s1-s1-s3" name="TS003 API Store" source="C:\PythonInterviewProject\TestSuites\API_Tests\TS003_API_Store.robot">
<test id="s1-s1-s3-t1" name="API_TS003_Test_1: Request an order" line="13">
<kw name="Given Get reference json" library="Validate_json">
<var>${add_order}</var>
<arg>reference_schema_path=${GLOBAL_SCHEMA_SEND_CREATE_ORDER}</arg>
<msg timestamp="20220905 14:27:26.718" level="INFO">{'id': 5, 'petId': 15, 'quantity': 2, 'shipDate': '2022-09-02T15:26:39.934Z', 'status': 'placed', 'complete': True}</msg>
<msg timestamp="20220905 14:27:26.718" level="INFO">${add_order} = {'id': 5, 'petId': 15, 'quantity': 2, 'shipDate': '2022-09-02T15:26:39.934Z', 'status': 'placed', 'complete': True}</msg>
<status status="PASS" starttime="20220905 14:27:26.717" endtime="20220905 14:27:26.718"/>
</kw>
<kw name="And Set Global Variable" library="BuiltIn">
<arg>${add_order}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220905 14:27:26.719" level="INFO">${add_order} = {'id': 5, 'petId': 15, 'quantity': 2, 'shipDate': '2022-09-02T15:26:39.934Z', 'status': 'placed', 'complete': True}</msg>
<status status="PASS" starttime="20220905 14:27:26.718" endtime="20220905 14:27:26.719"/>
</kw>
<kw name="When POST" library="RequestsLibrary">
<var>${response_body}</var>
<arg>url=${API_URL}/store/order</arg>
<arg>json=${add_order}</arg>
<arg>expected_status=200</arg>
<doc>Sends a POST request.</doc>
<msg timestamp="20220905 14:27:27.135" level="INFO">POST Request : url=https://petstore.swagger.io/v2/store/order 
 path_url=/v2/store/order 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '115', 'Content-Type': 'application/json'} 
 body=b'{"id": 5, "petId": 15, "quantity": 2, "shipDate": "2022-09-02T15:26:39.934Z", "status": "placed", "complete": true}' 
 </msg>
<msg timestamp="20220905 14:27:27.136" level="INFO">POST Response : url=https://petstore.swagger.io/v2/store/order 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:28 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"id":5,"petId":15,"quantity":2,"shipDate":"2022-09-02T15:26:39.934+0000","status":"placed","complete":true} 
 </msg>
<msg timestamp="20220905 14:27:27.136" level="INFO">${response_body} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:26.719" endtime="20220905 14:27:27.136"/>
</kw>
<kw name="And Validate the response schema with reference schema" library="DataChecker">
<arg>input=${response_body.json()}</arg>
<arg>ref_path=${GLOBAL_SCHEMA_RESPONSE_CREATE_ORDER}</arg>
<kw name="Get Reference Json" library="Validate_json">
<var>${ref}</var>
<arg>reference_schema_path=${ref_path}</arg>
<msg timestamp="20220905 14:27:27.139" level="INFO">{'id': 5, 'petId': 15, 'quantity': 2, 'shipDate': '2022-09-02T15:26:39.934+0000', 'status': 'placed', 'complete': True}</msg>
<msg timestamp="20220905 14:27:27.139" level="INFO">${ref} = {'id': 5, 'petId': 15, 'quantity': 2, 'shipDate': '2022-09-02T15:26:39.934+0000', 'status': 'placed', 'complete': True}</msg>
<status status="PASS" starttime="20220905 14:27:27.138" endtime="20220905 14:27:27.139"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${input}</arg>
<arg>${ref}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:27.139" endtime="20220905 14:27:27.139"/>
</kw>
<status status="PASS" starttime="20220905 14:27:27.137" endtime="20220905 14:27:27.140"/>
</kw>
<tag>API</tag>
<tag>API_STORE</tag>
<status status="PASS" starttime="20220905 14:27:26.711" endtime="20220905 14:27:27.140"/>
</test>
<test id="s1-s1-s3-t2" name="API_TS003_Test_2: Get the order from order id" line="19">
<kw name="Given Get From Dictionary" library="Collections">
<var>${orderId}</var>
<arg>${add_order}</arg>
<arg>id</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20220905 14:27:27.141" level="INFO">${orderId} = 5</msg>
<status status="PASS" starttime="20220905 14:27:27.141" endtime="20220905 14:27:27.141"/>
</kw>
<kw name="And Set Global Variable" library="BuiltIn">
<arg>${orderId}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220905 14:27:27.142" level="INFO">${orderId} = 5</msg>
<status status="PASS" starttime="20220905 14:27:27.141" endtime="20220905 14:27:27.142"/>
</kw>
<kw name="When GET" library="RequestsLibrary">
<var>${get_response}</var>
<arg>url=${API_URL}/store/order/${orderId}</arg>
<arg>expected_status=200</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:27.552" level="INFO">GET Request : url=https://petstore.swagger.io/v2/store/order/5 
 path_url=/v2/store/order/5 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220905 14:27:27.552" level="INFO">GET Response : url=https://petstore.swagger.io/v2/store/order/5 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:28 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"id":5,"petId":15,"quantity":2,"shipDate":"2022-09-02T15:26:39.934+0000","status":"placed","complete":true} 
 </msg>
<msg timestamp="20220905 14:27:27.552" level="INFO">${get_response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:27.142" endtime="20220905 14:27:27.552"/>
</kw>
<kw name="And Validate the response schema with reference schema" library="DataChecker">
<arg>input=${get_response.json()}</arg>
<arg>ref_path=${GLOBAL_SCHEMA_RESPONSE_CREATE_ORDER}</arg>
<kw name="Get Reference Json" library="Validate_json">
<var>${ref}</var>
<arg>reference_schema_path=${ref_path}</arg>
<msg timestamp="20220905 14:27:27.555" level="INFO">{'id': 5, 'petId': 15, 'quantity': 2, 'shipDate': '2022-09-02T15:26:39.934+0000', 'status': 'placed', 'complete': True}</msg>
<msg timestamp="20220905 14:27:27.555" level="INFO">${ref} = {'id': 5, 'petId': 15, 'quantity': 2, 'shipDate': '2022-09-02T15:26:39.934+0000', 'status': 'placed', 'complete': True}</msg>
<status status="PASS" starttime="20220905 14:27:27.554" endtime="20220905 14:27:27.555"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${input}</arg>
<arg>${ref}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:27.555" endtime="20220905 14:27:27.556"/>
</kw>
<status status="PASS" starttime="20220905 14:27:27.552" endtime="20220905 14:27:27.556"/>
</kw>
<tag>API</tag>
<tag>API_STORE</tag>
<status status="PASS" starttime="20220905 14:27:27.140" endtime="20220905 14:27:27.556"/>
</test>
<test id="s1-s1-s3-t3" name=" API_TS003_Test_3: Delete the order" line="25">
<kw name="When DELETE" library="RequestsLibrary">
<var>${delete_response}</var>
<arg>url=${API_URL}/store/order/${orderId}</arg>
<arg>expected_status=200</arg>
<doc>Sends a DELETE request.</doc>
<msg timestamp="20220905 14:27:27.981" level="INFO">DELETE Request : url=https://petstore.swagger.io/v2/store/order/5 
 path_url=/v2/store/order/5 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20220905 14:27:27.981" level="INFO">DELETE Response : url=https://petstore.swagger.io/v2/store/order/5 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:28 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"5"} 
 </msg>
<msg timestamp="20220905 14:27:27.981" level="INFO">${delete_response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220905 14:27:27.557" endtime="20220905 14:27:27.981"/>
</kw>
<kw name="Then The response should have correct data" library="DataChecker">
<arg>expected_value=${delete_response.json()}[type]</arg>
<arg>actual_value=unknown</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_value}</arg>
<arg>${actual_value}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:27.983" endtime="20220905 14:27:27.983"/>
</kw>
<status status="PASS" starttime="20220905 14:27:27.981" endtime="20220905 14:27:27.984"/>
</kw>
<kw name="And The response should have correct data" library="DataChecker">
<arg>expected_value=${delete_response.json()}[message]</arg>
<arg>actual_value=${orderId}</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_value}</arg>
<arg>${actual_value}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220905 14:27:27.986" level="INFO">Argument types are:
&lt;class 'str'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220905 14:27:27.985" endtime="20220905 14:27:27.986"/>
</kw>
<status status="PASS" starttime="20220905 14:27:27.984" endtime="20220905 14:27:27.986"/>
</kw>
<tag>API</tag>
<tag>API_STORE</tag>
<status status="PASS" starttime="20220905 14:27:27.557" endtime="20220905 14:27:27.986"/>
</test>
<test id="s1-s1-s3-t4" name="API_TS003_Test_4: Get with non-existed orderId (Negative Test)" line="31">
<kw name="When GET" library="RequestsLibrary">
<var>${response}</var>
<arg>url=${API_URL}/store/order/${invalid_orderId}</arg>
<arg>expected_status=400</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220905 14:27:28.430" level="INFO">GET Request : url=https://petstore.swagger.io/v2/store/order/15 
 path_url=/v2/store/order/15 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220905 14:27:28.431" level="INFO">GET Response : url=https://petstore.swagger.io/v2/store/order/15 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:29 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"id":15,"petId":15,"quantity":2,"shipDate":"2022-09-02T15:26:39.934+0000","status":"placed","complete":true} 
 </msg>
<msg timestamp="20220905 14:27:28.431" level="FAIL">Url: https://petstore.swagger.io/v2/store/order/15 Expected status: 200 != 400</msg>
<status status="FAIL" starttime="20220905 14:27:27.987" endtime="20220905 14:27:28.433"/>
</kw>
<kw name="Then The response should have correct data" library="DataChecker">
<arg>expected_value=${response.json()}[type]</arg>
<arg>actual_value=error</arg>
<status status="NOT RUN" starttime="20220905 14:27:28.433" endtime="20220905 14:27:28.433"/>
</kw>
<kw name="And The response should have correct data" library="DataChecker">
<arg>expected_value=${response.json()}[message]</arg>
<arg>actual_value=Invalid ID supplied</arg>
<status status="NOT RUN" starttime="20220905 14:27:28.434" endtime="20220905 14:27:28.434"/>
</kw>
<tag>API</tag>
<tag>API_STORE</tag>
<status status="FAIL" starttime="20220905 14:27:27.987" endtime="20220905 14:27:28.434">Url: https://petstore.swagger.io/v2/store/order/15 Expected status: 200 != 400</status>
</test>
<test id="s1-s1-s3-t5" name="API_TS004_Test_5: Add an order with invalid order Id (Negative test)" line="36">
<kw name="Given Set To Dictionary" library="Collections">
<arg>${add_order}</arg>
<arg>id=${invalid_orderId}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20220905 14:27:28.435" endtime="20220905 14:27:28.436"/>
</kw>
<kw name="When POST" library="RequestsLibrary">
<var>${response_body}</var>
<arg>url=${API_URL}/store/order</arg>
<arg>json=${add_order}</arg>
<arg>expected_status=400</arg>
<doc>Sends a POST request.</doc>
<msg timestamp="20220905 14:27:28.858" level="INFO">POST Request : url=https://petstore.swagger.io/v2/store/order 
 path_url=/v2/store/order 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '118', 'Content-Type': 'application/json'} 
 body=b'{"id": "15", "petId": 15, "quantity": 2, "shipDate": "2022-09-02T15:26:39.934Z", "status": "placed", "complete": true}' 
 </msg>
<msg timestamp="20220905 14:27:28.858" level="INFO">POST Response : url=https://petstore.swagger.io/v2/store/order 
 status=200, reason=OK 
 headers={'Date': 'Mon, 05 Sep 2022 12:27:29 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"id":15,"petId":15,"quantity":2,"shipDate":"2022-09-02T15:26:39.934+0000","status":"placed","complete":true} 
 </msg>
<msg timestamp="20220905 14:27:28.858" level="FAIL">Url: https://petstore.swagger.io/v2/store/order Expected status: 200 != 400</msg>
<status status="FAIL" starttime="20220905 14:27:28.436" endtime="20220905 14:27:28.858"/>
</kw>
<kw name="Then The response should have correct data" library="DataChecker">
<arg>expected_value=${response_body.json()}[type]</arg>
<arg>actual_value=error</arg>
<status status="NOT RUN" starttime="20220905 14:27:28.859" endtime="20220905 14:27:28.860"/>
</kw>
<kw name="And The response should have correct data" library="DataChecker">
<arg>expected_value=${response_body.json()}[message]</arg>
<arg>actual_value=Invalid Order</arg>
<status status="NOT RUN" starttime="20220905 14:27:28.860" endtime="20220905 14:27:28.860"/>
</kw>
<tag>API</tag>
<tag>API_STORE</tag>
<status status="FAIL" starttime="20220905 14:27:28.435" endtime="20220905 14:27:28.860">Url: https://petstore.swagger.io/v2/store/order Expected status: 200 != 400</status>
</test>
<status status="FAIL" starttime="20220905 14:27:26.585" endtime="20220905 14:27:28.861"/>
</suite>
<status status="FAIL" starttime="20220905 14:27:26.582" endtime="20220905 14:27:34.663"/>
</suite>
<suite id="s1-s2" name="UI Tests" source="C:\PythonInterviewProject\TestSuites\UI_Tests">
<suite id="s1-s2-s1" name="TS001 UI Click" source="C:\PythonInterviewProject\TestSuites\UI_Tests\TS001_UI_Click.robot">
<test id="s1-s2-s1-t1" name="UI_TS001_Test_1: Check if the color of button before and after the click" line="18">
<kw name="Preconditions" type="SETUP">
<kw name="Open the web page" library="Generic">
<arg>url=${WEB_URL}</arg>
<arg>browser=${BROWSER}</arg>
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${url}</arg>
<arg>${browser}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20220905 14:27:26.809" level="INFO">Opening browser 'Chrome' to base url 'http://www.uitestingplayground.com/'.</msg>
<status status="PASS" starttime="20220905 14:27:26.808" endtime="20220905 14:27:29.833"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20220905 14:27:29.834" endtime="20220905 14:27:30.066"/>
</kw>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<arg>text=UI Test Automation Playground</arg>
<arg>timeout=30s</arg>
<doc>Waits until ``text`` appears on the current page.</doc>
<status status="PASS" starttime="20220905 14:27:30.066" endtime="20220905 14:27:30.200"/>
</kw>
<status status="PASS" starttime="20220905 14:27:26.808" endtime="20220905 14:27:30.200"/>
</kw>
<kw name="Click on the scenario name" library="MainPage">
<arg>hyperlink_name=Click</arg>
<kw name="Click Element" library="SeleniumLibrary">
<arg>//a[text()="${hyperlink_name}"]</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20220905 14:27:30.202" level="INFO">Clicking element '//a[text()="Click"]'.</msg>
<status status="PASS" starttime="20220905 14:27:30.201" endtime="20220905 14:27:30.943"/>
</kw>
<status status="PASS" starttime="20220905 14:27:30.201" endtime="20220905 14:27:30.943"/>
</kw>
<status status="PASS" starttime="20220905 14:27:26.807" endtime="20220905 14:27:30.943"/>
</kw>
<kw name="Given The button is visible with the expected color" library="ClickActions">
<arg>buttonName=${buttonName}</arg>
<arg>expectedColor=${rgbaBlue}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${element_xpath}</var>
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220905 14:27:30.945" level="INFO">${element_xpath} = xpath=//button[text()="Button That Ignores DOM Click Event"]</msg>
<status status="PASS" starttime="20220905 14:27:30.944" endtime="20220905 14:27:30.945"/>
</kw>
<kw name="Mouse Out" library="SeleniumLibrary">
<arg>locator=${element_xpath}</arg>
<doc>Simulates moving the mouse away from the element ``locator``.</doc>
<msg timestamp="20220905 14:27:30.945" level="INFO">Simulating Mouse Out on element 'xpath=//button[text()="Button That Ignores DOM Click Event"]'.</msg>
<status status="PASS" starttime="20220905 14:27:30.945" endtime="20220905 14:27:31.510"/>
</kw>
<kw name="Get CSS Property Value" library="Generic">
<var>${actualColor}</var>
<arg>${element_xpath}</arg>
<arg>background-color</arg>
<doc>Get the CSS property value of an Element.</doc>
<kw name="Get WebElement" library="SeleniumLibrary">
<var>${css}</var>
<arg>locator=${locator}</arg>
<doc>Returns the first WebElement matching the given ``locator``.</doc>
<msg timestamp="20220905 14:27:31.518" level="INFO">${css} = &lt;selenium.webdriver.remote.webelement.WebElement (session="93d59747221b45eb88ed99a4070a9a83", element="3113100e-6f96-422f-b4d0-2841b9318d81")&gt;</msg>
<status status="PASS" starttime="20220905 14:27:31.511" endtime="20220905 14:27:31.518"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<var>${prop_val}</var>
<arg>${css}</arg>
<arg>value_of_css_property</arg>
<arg>${attribute_name}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<msg timestamp="20220905 14:27:31.529" level="INFO">${prop_val} = rgba(0, 123, 255, 1)</msg>
<status status="PASS" starttime="20220905 14:27:31.518" endtime="20220905 14:27:31.530"/>
</kw>
<msg timestamp="20220905 14:27:31.530" level="INFO">${actualColor} = rgba(0, 123, 255, 1)</msg>
<status status="PASS" starttime="20220905 14:27:31.511" endtime="20220905 14:27:31.530"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>first=${expectedColor}</arg>
<arg>second=${actualColor}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:31.530" endtime="20220905 14:27:31.531"/>
</kw>
<status status="PASS" starttime="20220905 14:27:30.943" endtime="20220905 14:27:31.531"/>
</kw>
<kw name="When Click on the button" library="ClickActions">
<arg>buttonName=${buttonName}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${button_xpath}</var>
<arg>//button[text()="${buttonName}"]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220905 14:27:31.532" level="INFO">${button_xpath} = //button[text()="Button That Ignores DOM Click Event"]</msg>
<status status="PASS" starttime="20220905 14:27:31.531" endtime="20220905 14:27:31.532"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${button_xpath}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20220905 14:27:31.532" endtime="20220905 14:27:31.554"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${button_xpath}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20220905 14:27:31.555" level="INFO">Clicking element '//button[text()="Button That Ignores DOM Click Event"]'.</msg>
<status status="PASS" starttime="20220905 14:27:31.555" endtime="20220905 14:27:31.598"/>
</kw>
<kw name="Mouse Out" library="SeleniumLibrary">
<arg>${button_xpath}</arg>
<doc>Simulates moving the mouse away from the element ``locator``.</doc>
<msg timestamp="20220905 14:27:31.599" level="INFO">Simulating Mouse Out on element '//button[text()="Button That Ignores DOM Click Event"]'.</msg>
<status status="PASS" starttime="20220905 14:27:31.598" endtime="20220905 14:27:32.149"/>
</kw>
<status status="PASS" starttime="20220905 14:27:31.531" endtime="20220905 14:27:32.150"/>
</kw>
<kw name="Then The button is visible with the expected color" library="ClickActions">
<arg>buttonName=${buttonName}</arg>
<arg>expectedColor=${rgbaGreen}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${element_xpath}</var>
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220905 14:27:32.151" level="INFO">${element_xpath} = xpath=//button[text()="Button That Ignores DOM Click Event"]</msg>
<status status="PASS" starttime="20220905 14:27:32.150" endtime="20220905 14:27:32.151"/>
</kw>
<kw name="Mouse Out" library="SeleniumLibrary">
<arg>locator=${element_xpath}</arg>
<doc>Simulates moving the mouse away from the element ``locator``.</doc>
<msg timestamp="20220905 14:27:32.151" level="INFO">Simulating Mouse Out on element 'xpath=//button[text()="Button That Ignores DOM Click Event"]'.</msg>
<status status="PASS" starttime="20220905 14:27:32.151" endtime="20220905 14:27:32.697"/>
</kw>
<kw name="Get CSS Property Value" library="Generic">
<var>${actualColor}</var>
<arg>${element_xpath}</arg>
<arg>background-color</arg>
<doc>Get the CSS property value of an Element.</doc>
<kw name="Get WebElement" library="SeleniumLibrary">
<var>${css}</var>
<arg>locator=${locator}</arg>
<doc>Returns the first WebElement matching the given ``locator``.</doc>
<msg timestamp="20220905 14:27:32.705" level="INFO">${css} = &lt;selenium.webdriver.remote.webelement.WebElement (session="93d59747221b45eb88ed99a4070a9a83", element="3113100e-6f96-422f-b4d0-2841b9318d81")&gt;</msg>
<status status="PASS" starttime="20220905 14:27:32.698" endtime="20220905 14:27:32.705"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<var>${prop_val}</var>
<arg>${css}</arg>
<arg>value_of_css_property</arg>
<arg>${attribute_name}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<msg timestamp="20220905 14:27:32.714" level="INFO">${prop_val} = rgba(40, 167, 69, 1)</msg>
<status status="PASS" starttime="20220905 14:27:32.705" endtime="20220905 14:27:32.714"/>
</kw>
<msg timestamp="20220905 14:27:32.714" level="INFO">${actualColor} = rgba(40, 167, 69, 1)</msg>
<status status="PASS" starttime="20220905 14:27:32.697" endtime="20220905 14:27:32.714"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>first=${expectedColor}</arg>
<arg>second=${actualColor}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:32.715" endtime="20220905 14:27:32.715"/>
</kw>
<status status="PASS" starttime="20220905 14:27:32.150" endtime="20220905 14:27:32.715"/>
</kw>
<kw name="Teardowns" type="TEARDOWN">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<arg>Capture Page Screenshot</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="PASS" starttime="20220905 14:27:32.716" endtime="20220905 14:27:32.716"/>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20220905 14:27:32.717" endtime="20220905 14:27:34.839"/>
</kw>
<status status="PASS" starttime="20220905 14:27:32.716" endtime="20220905 14:27:34.839"/>
</kw>
<tag>ClickFunction</tag>
<tag>UI</tag>
<status status="PASS" starttime="20220905 14:27:26.806" endtime="20220905 14:27:34.839"/>
</test>
<status status="PASS" starttime="20220905 14:27:26.592" endtime="20220905 14:27:34.840"/>
</suite>
<suite id="s1-s2-s2" name="TS002 UI TextVerify" source="C:\PythonInterviewProject\TestSuites\UI_Tests\TS002_UI_TextVerify.robot">
<test id="s1-s2-s2-t1" name="UI_TS002_Test_1: Check if 'Welcome UserName!' text field is available" line="13">
<kw name="Preconditions" type="SETUP">
<kw name="Open the web page" library="Generic">
<arg>${WEB_URL}</arg>
<arg>${BROWSER}</arg>
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${url}</arg>
<arg>${browser}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20220905 14:27:26.825" level="INFO">Opening browser 'Chrome' to base url 'http://www.uitestingplayground.com/'.</msg>
<status status="PASS" starttime="20220905 14:27:26.824" endtime="20220905 14:27:29.841"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20220905 14:27:29.841" endtime="20220905 14:27:30.049"/>
</kw>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<arg>text=UI Test Automation Playground</arg>
<arg>timeout=30s</arg>
<doc>Waits until ``text`` appears on the current page.</doc>
<status status="PASS" starttime="20220905 14:27:30.049" endtime="20220905 14:27:30.183"/>
</kw>
<status status="PASS" starttime="20220905 14:27:26.824" endtime="20220905 14:27:30.183"/>
</kw>
<kw name="Click on the scenario name" library="MainPage">
<arg>Verify Text</arg>
<kw name="Click Element" library="SeleniumLibrary">
<arg>//a[text()="${hyperlink_name}"]</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20220905 14:27:30.186" level="INFO">Clicking element '//a[text()="Verify Text"]'.</msg>
<status status="PASS" starttime="20220905 14:27:30.185" endtime="20220905 14:27:30.662"/>
</kw>
<status status="PASS" starttime="20220905 14:27:30.183" endtime="20220905 14:27:30.662"/>
</kw>
<status status="PASS" starttime="20220905 14:27:26.823" endtime="20220905 14:27:30.662"/>
</kw>
<kw name="Then User see 'Welcome UserName!' text field on the verify test page" library="VerifyTextPage">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>//span[normalize-space(.)='UserName']/parent::span[contains(text(),'Welcome')]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<msg timestamp="20220905 14:27:30.691" level="INFO">Current page contains element '//span[normalize-space(.)='UserName']/parent::span[contains(text(),'Welcome')]'.</msg>
<status status="PASS" starttime="20220905 14:27:30.664" endtime="20220905 14:27:30.691"/>
</kw>
<status status="PASS" starttime="20220905 14:27:30.663" endtime="20220905 14:27:30.691"/>
</kw>
<kw name="Teardowns" type="TEARDOWN">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<arg>Capture Page Screenshot</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="PASS" starttime="20220905 14:27:30.693" endtime="20220905 14:27:30.693"/>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20220905 14:27:30.693" endtime="20220905 14:27:32.911"/>
</kw>
<status status="PASS" starttime="20220905 14:27:30.692" endtime="20220905 14:27:32.912"/>
</kw>
<tag>TextVerify</tag>
<tag>UI</tag>
<status status="PASS" starttime="20220905 14:27:26.822" endtime="20220905 14:27:32.912"/>
</test>
<status status="PASS" starttime="20220905 14:27:26.609" endtime="20220905 14:27:32.913"/>
</suite>
<suite id="s1-s2-s3" name="TS003 UI Visibility" source="C:\PythonInterviewProject\TestSuites\UI_Tests\TS003_UI_Visibility.robot">
<test id="s1-s2-s3-t1" name="UI_TS003_Test_1: Check if all buttons visible after clicking on Hide button" line="14">
<kw name="Preconditions" type="SETUP">
<kw name="Open the web page" library="Generic">
<arg>url=${WEB_URL}</arg>
<arg>browser=${BROWSER}</arg>
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${url}</arg>
<arg>${browser}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20220905 14:27:26.842" level="INFO">Opening browser 'Chrome' to base url 'http://www.uitestingplayground.com/'.</msg>
<status status="PASS" starttime="20220905 14:27:26.842" endtime="20220905 14:27:29.847"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20220905 14:27:29.847" endtime="20220905 14:27:30.066"/>
</kw>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<arg>text=UI Test Automation Playground</arg>
<arg>timeout=30s</arg>
<doc>Waits until ``text`` appears on the current page.</doc>
<status status="PASS" starttime="20220905 14:27:30.066" endtime="20220905 14:27:30.218"/>
</kw>
<status status="PASS" starttime="20220905 14:27:26.841" endtime="20220905 14:27:30.219"/>
</kw>
<kw name="Click on the scenario name" library="MainPage">
<arg>hyperlink_name=Visibility</arg>
<kw name="Click Element" library="SeleniumLibrary">
<arg>//a[text()="${hyperlink_name}"]</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20220905 14:27:30.222" level="INFO">Clicking element '//a[text()="Visibility"]'.</msg>
<status status="PASS" starttime="20220905 14:27:30.220" endtime="20220905 14:27:30.670"/>
</kw>
<status status="PASS" starttime="20220905 14:27:30.219" endtime="20220905 14:27:30.670"/>
</kw>
<status status="PASS" starttime="20220905 14:27:26.840" endtime="20220905 14:27:30.670"/>
</kw>
<kw name="Given The button is visible with the expected color" library="ClickActions">
<arg>buttonName=Hide</arg>
<arg>expectedColor=rgba(0, 123, 255, 1)</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${element_xpath}</var>
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220905 14:27:30.673" level="INFO">${element_xpath} = xpath=//button[text()="Hide"]</msg>
<status status="PASS" starttime="20220905 14:27:30.672" endtime="20220905 14:27:30.673"/>
</kw>
<kw name="Mouse Out" library="SeleniumLibrary">
<arg>locator=${element_xpath}</arg>
<doc>Simulates moving the mouse away from the element ``locator``.</doc>
<msg timestamp="20220905 14:27:30.674" level="INFO">Simulating Mouse Out on element 'xpath=//button[text()="Hide"]'.</msg>
<status status="PASS" starttime="20220905 14:27:30.674" endtime="20220905 14:27:31.324"/>
</kw>
<kw name="Get CSS Property Value" library="Generic">
<var>${actualColor}</var>
<arg>${element_xpath}</arg>
<arg>background-color</arg>
<doc>Get the CSS property value of an Element.</doc>
<kw name="Get WebElement" library="SeleniumLibrary">
<var>${css}</var>
<arg>locator=${locator}</arg>
<doc>Returns the first WebElement matching the given ``locator``.</doc>
<msg timestamp="20220905 14:27:31.332" level="INFO">${css} = &lt;selenium.webdriver.remote.webelement.WebElement (session="830d41478b856bbedc969fc25323a8f4", element="cbb5ed26-a82e-4028-b2b7-b7059c931eb9")&gt;</msg>
<status status="PASS" starttime="20220905 14:27:31.325" endtime="20220905 14:27:31.332"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<var>${prop_val}</var>
<arg>${css}</arg>
<arg>value_of_css_property</arg>
<arg>${attribute_name}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<msg timestamp="20220905 14:27:31.346" level="INFO">${prop_val} = rgba(0, 123, 255, 1)</msg>
<status status="PASS" starttime="20220905 14:27:31.332" endtime="20220905 14:27:31.346"/>
</kw>
<msg timestamp="20220905 14:27:31.347" level="INFO">${actualColor} = rgba(0, 123, 255, 1)</msg>
<status status="PASS" starttime="20220905 14:27:31.324" endtime="20220905 14:27:31.347"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>first=${expectedColor}</arg>
<arg>second=${actualColor}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:31.347" endtime="20220905 14:27:31.347"/>
</kw>
<status status="PASS" starttime="20220905 14:27:30.670" endtime="20220905 14:27:31.348"/>
</kw>
<kw name="And The button is visible with the expected color" library="ClickActions">
<arg>buttonName=Removed</arg>
<arg>expectedColor=rgba(220, 53, 69, 1)</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${element_xpath}</var>
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220905 14:27:31.348" level="INFO">${element_xpath} = xpath=//button[text()="Removed"]</msg>
<status status="PASS" starttime="20220905 14:27:31.348" endtime="20220905 14:27:31.348"/>
</kw>
<kw name="Mouse Out" library="SeleniumLibrary">
<arg>locator=${element_xpath}</arg>
<doc>Simulates moving the mouse away from the element ``locator``.</doc>
<msg timestamp="20220905 14:27:31.349" level="INFO">Simulating Mouse Out on element 'xpath=//button[text()="Removed"]'.</msg>
<status status="PASS" starttime="20220905 14:27:31.349" endtime="20220905 14:27:31.899"/>
</kw>
<kw name="Get CSS Property Value" library="Generic">
<var>${actualColor}</var>
<arg>${element_xpath}</arg>
<arg>background-color</arg>
<doc>Get the CSS property value of an Element.</doc>
<kw name="Get WebElement" library="SeleniumLibrary">
<var>${css}</var>
<arg>locator=${locator}</arg>
<doc>Returns the first WebElement matching the given ``locator``.</doc>
<msg timestamp="20220905 14:27:31.908" level="INFO">${css} = &lt;selenium.webdriver.remote.webelement.WebElement (session="830d41478b856bbedc969fc25323a8f4", element="5ae54259-c49f-4ca5-9094-329f4c11a63a")&gt;</msg>
<status status="PASS" starttime="20220905 14:27:31.900" endtime="20220905 14:27:31.908"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<var>${prop_val}</var>
<arg>${css}</arg>
<arg>value_of_css_property</arg>
<arg>${attribute_name}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<msg timestamp="20220905 14:27:31.921" level="INFO">${prop_val} = rgba(220, 53, 69, 1)</msg>
<status status="PASS" starttime="20220905 14:27:31.909" endtime="20220905 14:27:31.921"/>
</kw>
<msg timestamp="20220905 14:27:31.921" level="INFO">${actualColor} = rgba(220, 53, 69, 1)</msg>
<status status="PASS" starttime="20220905 14:27:31.899" endtime="20220905 14:27:31.922"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>first=${expectedColor}</arg>
<arg>second=${actualColor}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:31.922" endtime="20220905 14:27:31.923"/>
</kw>
<status status="PASS" starttime="20220905 14:27:31.348" endtime="20220905 14:27:31.923"/>
</kw>
<kw name="And The button is visible with the expected color" library="ClickActions">
<arg>buttonName=Zero Width</arg>
<arg>expectedColor=rgba(255, 193, 7, 1)</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${element_xpath}</var>
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220905 14:27:31.924" level="INFO">${element_xpath} = xpath=//button[text()="Zero Width"]</msg>
<status status="PASS" starttime="20220905 14:27:31.923" endtime="20220905 14:27:31.924"/>
</kw>
<kw name="Mouse Out" library="SeleniumLibrary">
<arg>locator=${element_xpath}</arg>
<doc>Simulates moving the mouse away from the element ``locator``.</doc>
<msg timestamp="20220905 14:27:31.924" level="INFO">Simulating Mouse Out on element 'xpath=//button[text()="Zero Width"]'.</msg>
<status status="PASS" starttime="20220905 14:27:31.924" endtime="20220905 14:27:32.480"/>
</kw>
<kw name="Get CSS Property Value" library="Generic">
<var>${actualColor}</var>
<arg>${element_xpath}</arg>
<arg>background-color</arg>
<doc>Get the CSS property value of an Element.</doc>
<kw name="Get WebElement" library="SeleniumLibrary">
<var>${css}</var>
<arg>locator=${locator}</arg>
<doc>Returns the first WebElement matching the given ``locator``.</doc>
<msg timestamp="20220905 14:27:32.489" level="INFO">${css} = &lt;selenium.webdriver.remote.webelement.WebElement (session="830d41478b856bbedc969fc25323a8f4", element="aa0d6e79-cb11-4096-b2ea-6abd579db34c")&gt;</msg>
<status status="PASS" starttime="20220905 14:27:32.482" endtime="20220905 14:27:32.489"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<var>${prop_val}</var>
<arg>${css}</arg>
<arg>value_of_css_property</arg>
<arg>${attribute_name}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<msg timestamp="20220905 14:27:32.502" level="INFO">${prop_val} = rgba(255, 193, 7, 1)</msg>
<status status="PASS" starttime="20220905 14:27:32.490" endtime="20220905 14:27:32.503"/>
</kw>
<msg timestamp="20220905 14:27:32.503" level="INFO">${actualColor} = rgba(255, 193, 7, 1)</msg>
<status status="PASS" starttime="20220905 14:27:32.481" endtime="20220905 14:27:32.503"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>first=${expectedColor}</arg>
<arg>second=${actualColor}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:32.503" endtime="20220905 14:27:32.504"/>
</kw>
<status status="PASS" starttime="20220905 14:27:31.923" endtime="20220905 14:27:32.504"/>
</kw>
<kw name="And The button is visible with the expected color" library="ClickActions">
<arg>buttonName=Overlapped</arg>
<arg>expectedColor=rgba(40, 167, 69, 1)</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${element_xpath}</var>
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220905 14:27:32.505" level="INFO">${element_xpath} = xpath=//button[text()="Overlapped"]</msg>
<status status="PASS" starttime="20220905 14:27:32.505" endtime="20220905 14:27:32.505"/>
</kw>
<kw name="Mouse Out" library="SeleniumLibrary">
<arg>locator=${element_xpath}</arg>
<doc>Simulates moving the mouse away from the element ``locator``.</doc>
<msg timestamp="20220905 14:27:32.506" level="INFO">Simulating Mouse Out on element 'xpath=//button[text()="Overlapped"]'.</msg>
<status status="PASS" starttime="20220905 14:27:32.506" endtime="20220905 14:27:33.070"/>
</kw>
<kw name="Get CSS Property Value" library="Generic">
<var>${actualColor}</var>
<arg>${element_xpath}</arg>
<arg>background-color</arg>
<doc>Get the CSS property value of an Element.</doc>
<kw name="Get WebElement" library="SeleniumLibrary">
<var>${css}</var>
<arg>locator=${locator}</arg>
<doc>Returns the first WebElement matching the given ``locator``.</doc>
<msg timestamp="20220905 14:27:33.078" level="INFO">${css} = &lt;selenium.webdriver.remote.webelement.WebElement (session="830d41478b856bbedc969fc25323a8f4", element="744aab8e-ad3a-492c-b938-7bf823c71262")&gt;</msg>
<status status="PASS" starttime="20220905 14:27:33.071" endtime="20220905 14:27:33.078"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<var>${prop_val}</var>
<arg>${css}</arg>
<arg>value_of_css_property</arg>
<arg>${attribute_name}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<msg timestamp="20220905 14:27:33.088" level="INFO">${prop_val} = rgba(40, 167, 69, 1)</msg>
<status status="PASS" starttime="20220905 14:27:33.078" endtime="20220905 14:27:33.088"/>
</kw>
<msg timestamp="20220905 14:27:33.089" level="INFO">${actualColor} = rgba(40, 167, 69, 1)</msg>
<status status="PASS" starttime="20220905 14:27:33.071" endtime="20220905 14:27:33.089"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>first=${expectedColor}</arg>
<arg>second=${actualColor}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:33.089" endtime="20220905 14:27:33.089"/>
</kw>
<status status="PASS" starttime="20220905 14:27:32.504" endtime="20220905 14:27:33.090"/>
</kw>
<kw name="And The button is visible with the expected color" library="ClickActions">
<arg>buttonName=Opacity 0</arg>
<arg>expectedColor=rgba(23, 162, 184, 1)</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${element_xpath}</var>
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220905 14:27:33.091" level="INFO">${element_xpath} = xpath=//button[text()="Opacity 0"]</msg>
<status status="PASS" starttime="20220905 14:27:33.090" endtime="20220905 14:27:33.091"/>
</kw>
<kw name="Mouse Out" library="SeleniumLibrary">
<arg>locator=${element_xpath}</arg>
<doc>Simulates moving the mouse away from the element ``locator``.</doc>
<msg timestamp="20220905 14:27:33.091" level="INFO">Simulating Mouse Out on element 'xpath=//button[text()="Opacity 0"]'.</msg>
<status status="PASS" starttime="20220905 14:27:33.091" endtime="20220905 14:27:33.645"/>
</kw>
<kw name="Get CSS Property Value" library="Generic">
<var>${actualColor}</var>
<arg>${element_xpath}</arg>
<arg>background-color</arg>
<doc>Get the CSS property value of an Element.</doc>
<kw name="Get WebElement" library="SeleniumLibrary">
<var>${css}</var>
<arg>locator=${locator}</arg>
<doc>Returns the first WebElement matching the given ``locator``.</doc>
<msg timestamp="20220905 14:27:33.652" level="INFO">${css} = &lt;selenium.webdriver.remote.webelement.WebElement (session="830d41478b856bbedc969fc25323a8f4", element="752220f3-1d3f-4645-92b0-4eed56ecf025")&gt;</msg>
<status status="PASS" starttime="20220905 14:27:33.646" endtime="20220905 14:27:33.652"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<var>${prop_val}</var>
<arg>${css}</arg>
<arg>value_of_css_property</arg>
<arg>${attribute_name}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<msg timestamp="20220905 14:27:33.665" level="INFO">${prop_val} = rgba(23, 162, 184, 1)</msg>
<status status="PASS" starttime="20220905 14:27:33.653" endtime="20220905 14:27:33.665"/>
</kw>
<msg timestamp="20220905 14:27:33.665" level="INFO">${actualColor} = rgba(23, 162, 184, 1)</msg>
<status status="PASS" starttime="20220905 14:27:33.645" endtime="20220905 14:27:33.665"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>first=${expectedColor}</arg>
<arg>second=${actualColor}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:33.665" endtime="20220905 14:27:33.666"/>
</kw>
<status status="PASS" starttime="20220905 14:27:33.090" endtime="20220905 14:27:33.666"/>
</kw>
<kw name="And The button is visible with the expected color" library="ClickActions">
<arg>buttonName=Visibility Hidden</arg>
<arg>expectedColor=rgba(23, 162, 184, 1)</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${element_xpath}</var>
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220905 14:27:33.667" level="INFO">${element_xpath} = xpath=//button[text()="Visibility Hidden"]</msg>
<status status="PASS" starttime="20220905 14:27:33.666" endtime="20220905 14:27:33.667"/>
</kw>
<kw name="Mouse Out" library="SeleniumLibrary">
<arg>locator=${element_xpath}</arg>
<doc>Simulates moving the mouse away from the element ``locator``.</doc>
<msg timestamp="20220905 14:27:33.667" level="INFO">Simulating Mouse Out on element 'xpath=//button[text()="Visibility Hidden"]'.</msg>
<status status="PASS" starttime="20220905 14:27:33.667" endtime="20220905 14:27:34.226"/>
</kw>
<kw name="Get CSS Property Value" library="Generic">
<var>${actualColor}</var>
<arg>${element_xpath}</arg>
<arg>background-color</arg>
<doc>Get the CSS property value of an Element.</doc>
<kw name="Get WebElement" library="SeleniumLibrary">
<var>${css}</var>
<arg>locator=${locator}</arg>
<doc>Returns the first WebElement matching the given ``locator``.</doc>
<msg timestamp="20220905 14:27:34.233" level="INFO">${css} = &lt;selenium.webdriver.remote.webelement.WebElement (session="830d41478b856bbedc969fc25323a8f4", element="6d6c9ef5-89f0-49cd-a3ca-e7b72e88ba3b")&gt;</msg>
<status status="PASS" starttime="20220905 14:27:34.227" endtime="20220905 14:27:34.233"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<var>${prop_val}</var>
<arg>${css}</arg>
<arg>value_of_css_property</arg>
<arg>${attribute_name}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<msg timestamp="20220905 14:27:34.243" level="INFO">${prop_val} = rgba(23, 162, 184, 1)</msg>
<status status="PASS" starttime="20220905 14:27:34.233" endtime="20220905 14:27:34.243"/>
</kw>
<msg timestamp="20220905 14:27:34.243" level="INFO">${actualColor} = rgba(23, 162, 184, 1)</msg>
<status status="PASS" starttime="20220905 14:27:34.226" endtime="20220905 14:27:34.243"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>first=${expectedColor}</arg>
<arg>second=${actualColor}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:34.243" endtime="20220905 14:27:34.244"/>
</kw>
<status status="PASS" starttime="20220905 14:27:33.666" endtime="20220905 14:27:34.244"/>
</kw>
<kw name="And The button is visible with the expected color" library="ClickActions">
<arg>buttonName=Display None</arg>
<arg>expectedColor=rgba(23, 162, 184, 1)</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${element_xpath}</var>
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220905 14:27:34.245" level="INFO">${element_xpath} = xpath=//button[text()="Display None"]</msg>
<status status="PASS" starttime="20220905 14:27:34.245" endtime="20220905 14:27:34.246"/>
</kw>
<kw name="Mouse Out" library="SeleniumLibrary">
<arg>locator=${element_xpath}</arg>
<doc>Simulates moving the mouse away from the element ``locator``.</doc>
<msg timestamp="20220905 14:27:34.246" level="INFO">Simulating Mouse Out on element 'xpath=//button[text()="Display None"]'.</msg>
<status status="PASS" starttime="20220905 14:27:34.246" endtime="20220905 14:27:34.794"/>
</kw>
<kw name="Get CSS Property Value" library="Generic">
<var>${actualColor}</var>
<arg>${element_xpath}</arg>
<arg>background-color</arg>
<doc>Get the CSS property value of an Element.</doc>
<kw name="Get WebElement" library="SeleniumLibrary">
<var>${css}</var>
<arg>locator=${locator}</arg>
<doc>Returns the first WebElement matching the given ``locator``.</doc>
<msg timestamp="20220905 14:27:34.803" level="INFO">${css} = &lt;selenium.webdriver.remote.webelement.WebElement (session="830d41478b856bbedc969fc25323a8f4", element="24536181-2af0-4938-b2e0-9d8382637a42")&gt;</msg>
<status status="PASS" starttime="20220905 14:27:34.795" endtime="20220905 14:27:34.803"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<var>${prop_val}</var>
<arg>${css}</arg>
<arg>value_of_css_property</arg>
<arg>${attribute_name}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<msg timestamp="20220905 14:27:34.815" level="INFO">${prop_val} = rgba(23, 162, 184, 1)</msg>
<status status="PASS" starttime="20220905 14:27:34.803" endtime="20220905 14:27:34.815"/>
</kw>
<msg timestamp="20220905 14:27:34.815" level="INFO">${actualColor} = rgba(23, 162, 184, 1)</msg>
<status status="PASS" starttime="20220905 14:27:34.794" endtime="20220905 14:27:34.815"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>first=${expectedColor}</arg>
<arg>second=${actualColor}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:34.815" endtime="20220905 14:27:34.816"/>
</kw>
<status status="PASS" starttime="20220905 14:27:34.244" endtime="20220905 14:27:34.816"/>
</kw>
<kw name="And The button is visible with the expected color" library="ClickActions">
<arg>buttonName=Offscreen</arg>
<arg>expectedColor=rgba(23, 162, 184, 1)</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${element_xpath}</var>
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220905 14:27:34.817" level="INFO">${element_xpath} = xpath=//button[text()="Offscreen"]</msg>
<status status="PASS" starttime="20220905 14:27:34.817" endtime="20220905 14:27:34.817"/>
</kw>
<kw name="Mouse Out" library="SeleniumLibrary">
<arg>locator=${element_xpath}</arg>
<doc>Simulates moving the mouse away from the element ``locator``.</doc>
<msg timestamp="20220905 14:27:34.818" level="INFO">Simulating Mouse Out on element 'xpath=//button[text()="Offscreen"]'.</msg>
<status status="PASS" starttime="20220905 14:27:34.817" endtime="20220905 14:27:35.362"/>
</kw>
<kw name="Get CSS Property Value" library="Generic">
<var>${actualColor}</var>
<arg>${element_xpath}</arg>
<arg>background-color</arg>
<doc>Get the CSS property value of an Element.</doc>
<kw name="Get WebElement" library="SeleniumLibrary">
<var>${css}</var>
<arg>locator=${locator}</arg>
<doc>Returns the first WebElement matching the given ``locator``.</doc>
<msg timestamp="20220905 14:27:35.370" level="INFO">${css} = &lt;selenium.webdriver.remote.webelement.WebElement (session="830d41478b856bbedc969fc25323a8f4", element="291ede40-e24b-491d-a599-bff3fe17ef7e")&gt;</msg>
<status status="PASS" starttime="20220905 14:27:35.363" endtime="20220905 14:27:35.370"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<var>${prop_val}</var>
<arg>${css}</arg>
<arg>value_of_css_property</arg>
<arg>${attribute_name}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<msg timestamp="20220905 14:27:35.384" level="INFO">${prop_val} = rgba(23, 162, 184, 1)</msg>
<status status="PASS" starttime="20220905 14:27:35.370" endtime="20220905 14:27:35.384"/>
</kw>
<msg timestamp="20220905 14:27:35.384" level="INFO">${actualColor} = rgba(23, 162, 184, 1)</msg>
<status status="PASS" starttime="20220905 14:27:35.362" endtime="20220905 14:27:35.384"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>first=${expectedColor}</arg>
<arg>second=${actualColor}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:35.385" endtime="20220905 14:27:35.385"/>
</kw>
<status status="PASS" starttime="20220905 14:27:34.816" endtime="20220905 14:27:35.385"/>
</kw>
<kw name="When Click on the button" library="ClickActions">
<arg>buttonName=Hide</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${button_xpath}</var>
<arg>//button[text()="${buttonName}"]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220905 14:27:35.386" level="INFO">${button_xpath} = //button[text()="Hide"]</msg>
<status status="PASS" starttime="20220905 14:27:35.386" endtime="20220905 14:27:35.386"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${button_xpath}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20220905 14:27:35.386" endtime="20220905 14:27:35.413"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${button_xpath}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20220905 14:27:35.414" level="INFO">Clicking element '//button[text()="Hide"]'.</msg>
<status status="PASS" starttime="20220905 14:27:35.413" endtime="20220905 14:27:35.465"/>
</kw>
<kw name="Mouse Out" library="SeleniumLibrary">
<arg>${button_xpath}</arg>
<doc>Simulates moving the mouse away from the element ``locator``.</doc>
<msg timestamp="20220905 14:27:35.466" level="INFO">Simulating Mouse Out on element '//button[text()="Hide"]'.</msg>
<status status="PASS" starttime="20220905 14:27:35.465" endtime="20220905 14:27:36.005"/>
</kw>
<status status="PASS" starttime="20220905 14:27:35.386" endtime="20220905 14:27:36.006"/>
</kw>
<kw name="Then Check a button status after clicking on Hide button" library="VisibilityPage">
<arg>buttonName=Removed</arg>
<if>
<branch type="IF" condition="&quot;${button_name}&quot; == &quot;Removed&quot;">
<kw name="Page Should Not Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Verifies that element ``locator`` is not found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.008" endtime="20220905 14:27:36.008"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.007" endtime="20220905 14:27:36.008"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Zero Width&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}" and @class="btn btn-warning zerowidth"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.008" endtime="20220905 14:27:36.008"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.008" endtime="20220905 14:27:36.008"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Overlapped&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}"]/following-sibling::div[contains(@style,absolute)]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.009" endtime="20220905 14:27:36.009"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.008" endtime="20220905 14:27:36.009"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Opacity 0&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="opacity: 0;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.009" endtime="20220905 14:27:36.009"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.009" endtime="20220905 14:27:36.009"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Visibility Hidden&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="visibility: hidden;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.009" endtime="20220905 14:27:36.010"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.009" endtime="20220905 14:27:36.010"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Display None&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="display: none;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.010" endtime="20220905 14:27:36.010"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.010" endtime="20220905 14:27:36.010"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Offscreen&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @class="btn btn-info offscreen"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.010" endtime="20220905 14:27:36.010"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.010" endtime="20220905 14:27:36.011"/>
</branch>
<status status="PASS" starttime="20220905 14:27:36.007" endtime="20220905 14:27:36.011"/>
</if>
<status status="PASS" starttime="20220905 14:27:36.007" endtime="20220905 14:27:36.011"/>
</kw>
<kw name="And Check a button status after clicking on Hide button" library="VisibilityPage">
<arg>buttonName=Zero Width</arg>
<if>
<branch type="IF" condition="&quot;${button_name}&quot; == &quot;Removed&quot;">
<kw name="Page Should Not Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Verifies that element ``locator`` is not found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.011" endtime="20220905 14:27:36.012"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.011" endtime="20220905 14:27:36.012"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Zero Width&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}" and @class="btn btn-warning zerowidth"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.012" endtime="20220905 14:27:36.012"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.012" endtime="20220905 14:27:36.012"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Overlapped&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}"]/following-sibling::div[contains(@style,absolute)]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.012" endtime="20220905 14:27:36.012"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.012" endtime="20220905 14:27:36.012"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Opacity 0&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="opacity: 0;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.013" endtime="20220905 14:27:36.013"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.013" endtime="20220905 14:27:36.013"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Visibility Hidden&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="visibility: hidden;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.013" endtime="20220905 14:27:36.013"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.013" endtime="20220905 14:27:36.013"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Display None&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="display: none;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.014" endtime="20220905 14:27:36.014"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.014" endtime="20220905 14:27:36.014"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Offscreen&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @class="btn btn-info offscreen"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.014" endtime="20220905 14:27:36.014"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.014" endtime="20220905 14:27:36.014"/>
</branch>
<status status="PASS" starttime="20220905 14:27:36.011" endtime="20220905 14:27:36.014"/>
</if>
<status status="PASS" starttime="20220905 14:27:36.011" endtime="20220905 14:27:36.015"/>
</kw>
<kw name="And Check a button status after clicking on Hide button" library="VisibilityPage">
<arg>buttonName=Overlapped</arg>
<if>
<branch type="IF" condition="&quot;${button_name}&quot; == &quot;Removed&quot;">
<kw name="Page Should Not Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Verifies that element ``locator`` is not found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.015" endtime="20220905 14:27:36.015"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.015" endtime="20220905 14:27:36.015"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Zero Width&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}" and @class="btn btn-warning zerowidth"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.016" endtime="20220905 14:27:36.016"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.016" endtime="20220905 14:27:36.016"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Overlapped&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}"]/following-sibling::div[contains(@style,absolute)]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.016" endtime="20220905 14:27:36.016"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.016" endtime="20220905 14:27:36.016"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Opacity 0&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="opacity: 0;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.017" endtime="20220905 14:27:36.017"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.017" endtime="20220905 14:27:36.017"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Visibility Hidden&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="visibility: hidden;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.017" endtime="20220905 14:27:36.017"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.017" endtime="20220905 14:27:36.017"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Display None&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="display: none;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.018" endtime="20220905 14:27:36.018"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.017" endtime="20220905 14:27:36.018"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Offscreen&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @class="btn btn-info offscreen"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.018" endtime="20220905 14:27:36.018"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.018" endtime="20220905 14:27:36.018"/>
</branch>
<status status="PASS" starttime="20220905 14:27:36.015" endtime="20220905 14:27:36.018"/>
</if>
<status status="PASS" starttime="20220905 14:27:36.015" endtime="20220905 14:27:36.018"/>
</kw>
<kw name="And Check a button status after clicking on Hide button" library="VisibilityPage">
<arg>buttonName=Opacity 0</arg>
<if>
<branch type="IF" condition="&quot;${button_name}&quot; == &quot;Removed&quot;">
<kw name="Page Should Not Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Verifies that element ``locator`` is not found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.019" endtime="20220905 14:27:36.019"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.019" endtime="20220905 14:27:36.019"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Zero Width&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}" and @class="btn btn-warning zerowidth"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.020" endtime="20220905 14:27:36.020"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.020" endtime="20220905 14:27:36.020"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Overlapped&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}"]/following-sibling::div[contains(@style,absolute)]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.020" endtime="20220905 14:27:36.020"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.020" endtime="20220905 14:27:36.020"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Opacity 0&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="opacity: 0;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.021" endtime="20220905 14:27:36.021"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.020" endtime="20220905 14:27:36.021"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Visibility Hidden&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="visibility: hidden;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.021" endtime="20220905 14:27:36.021"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.021" endtime="20220905 14:27:36.021"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Display None&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="display: none;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.022" endtime="20220905 14:27:36.022"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.021" endtime="20220905 14:27:36.022"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Offscreen&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @class="btn btn-info offscreen"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.022" endtime="20220905 14:27:36.022"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.022" endtime="20220905 14:27:36.022"/>
</branch>
<status status="PASS" starttime="20220905 14:27:36.019" endtime="20220905 14:27:36.022"/>
</if>
<status status="PASS" starttime="20220905 14:27:36.018" endtime="20220905 14:27:36.022"/>
</kw>
<kw name="And Check a button status after clicking on Hide button" library="VisibilityPage">
<arg>buttonName=Visibility Hidden</arg>
<if>
<branch type="IF" condition="&quot;${button_name}&quot; == &quot;Removed&quot;">
<kw name="Page Should Not Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Verifies that element ``locator`` is not found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.023" endtime="20220905 14:27:36.023"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.023" endtime="20220905 14:27:36.023"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Zero Width&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}" and @class="btn btn-warning zerowidth"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.024" endtime="20220905 14:27:36.024"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.024" endtime="20220905 14:27:36.024"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Overlapped&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}"]/following-sibling::div[contains(@style,absolute)]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.024" endtime="20220905 14:27:36.024"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.024" endtime="20220905 14:27:36.024"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Opacity 0&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="opacity: 0;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.025" endtime="20220905 14:27:36.025"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.024" endtime="20220905 14:27:36.025"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Visibility Hidden&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="visibility: hidden;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.025" endtime="20220905 14:27:36.025"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.025" endtime="20220905 14:27:36.025"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Display None&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="display: none;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.025" endtime="20220905 14:27:36.026"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.025" endtime="20220905 14:27:36.026"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Offscreen&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @class="btn btn-info offscreen"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.026" endtime="20220905 14:27:36.026"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.026" endtime="20220905 14:27:36.026"/>
</branch>
<status status="PASS" starttime="20220905 14:27:36.023" endtime="20220905 14:27:36.026"/>
</if>
<status status="PASS" starttime="20220905 14:27:36.023" endtime="20220905 14:27:36.026"/>
</kw>
<kw name="And Check a button status after clicking on Hide button" library="VisibilityPage">
<arg>buttonName=Display None</arg>
<if>
<branch type="IF" condition="&quot;${button_name}&quot; == &quot;Removed&quot;">
<kw name="Page Should Not Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Verifies that element ``locator`` is not found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.027" endtime="20220905 14:27:36.027"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.027" endtime="20220905 14:27:36.027"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Zero Width&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}" and @class="btn btn-warning zerowidth"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.027" endtime="20220905 14:27:36.028"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.027" endtime="20220905 14:27:36.028"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Overlapped&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}"]/following-sibling::div[contains(@style,absolute)]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.028" endtime="20220905 14:27:36.028"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.028" endtime="20220905 14:27:36.028"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Opacity 0&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="opacity: 0;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.028" endtime="20220905 14:27:36.028"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.028" endtime="20220905 14:27:36.029"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Visibility Hidden&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="visibility: hidden;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.029" endtime="20220905 14:27:36.029"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.029" endtime="20220905 14:27:36.029"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Display None&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="display: none;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.029" endtime="20220905 14:27:36.029"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.029" endtime="20220905 14:27:36.029"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Offscreen&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @class="btn btn-info offscreen"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.030" endtime="20220905 14:27:36.030"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.030" endtime="20220905 14:27:36.030"/>
</branch>
<status status="PASS" starttime="20220905 14:27:36.027" endtime="20220905 14:27:36.030"/>
</if>
<status status="PASS" starttime="20220905 14:27:36.026" endtime="20220905 14:27:36.030"/>
</kw>
<kw name="And Check a button status after clicking on Hide button" library="VisibilityPage">
<arg>buttonName=Offscreen</arg>
<if>
<branch type="IF" condition="&quot;${button_name}&quot; == &quot;Removed&quot;">
<kw name="Page Should Not Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Verifies that element ``locator`` is not found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.031" endtime="20220905 14:27:36.031"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.031" endtime="20220905 14:27:36.031"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Zero Width&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}" and @class="btn btn-warning zerowidth"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.031" endtime="20220905 14:27:36.031"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.031" endtime="20220905 14:27:36.031"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Overlapped&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${buttonName}"]/following-sibling::div[contains(@style,absolute)]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.032" endtime="20220905 14:27:36.032"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.032" endtime="20220905 14:27:36.032"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Opacity 0&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="opacity: 0;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.032" endtime="20220905 14:27:36.032"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.032" endtime="20220905 14:27:36.033"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Visibility Hidden&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="visibility: hidden;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.033" endtime="20220905 14:27:36.033"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.033" endtime="20220905 14:27:36.033"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Display None&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @style="display: none;"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.033" endtime="20220905 14:27:36.033"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.033" endtime="20220905 14:27:36.033"/>
</branch>
<branch type="ELSE IF" condition="&quot;${button_name}&quot; == &quot;Offscreen&quot;">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>xpath=//button[text()="${button_name}" and @class="btn btn-info offscreen"]</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<status status="NOT RUN" starttime="20220905 14:27:36.034" endtime="20220905 14:27:36.034"/>
</kw>
<status status="NOT RUN" starttime="20220905 14:27:36.034" endtime="20220905 14:27:36.034"/>
</branch>
<status status="PASS" starttime="20220905 14:27:36.031" endtime="20220905 14:27:36.034"/>
</if>
<status status="PASS" starttime="20220905 14:27:36.030" endtime="20220905 14:27:36.034"/>
</kw>
<kw name="And The button is visible with the expected color" library="ClickActions">
<arg>buttonName=Hide</arg>
<arg>expectedColor=rgba(0, 123, 255, 1)</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${element_xpath}</var>
<arg>xpath=//button[text()="${buttonName}"]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220905 14:27:36.035" level="INFO">${element_xpath} = xpath=//button[text()="Hide"]</msg>
<status status="PASS" starttime="20220905 14:27:36.035" endtime="20220905 14:27:36.035"/>
</kw>
<kw name="Mouse Out" library="SeleniumLibrary">
<arg>locator=${element_xpath}</arg>
<doc>Simulates moving the mouse away from the element ``locator``.</doc>
<msg timestamp="20220905 14:27:36.035" level="INFO">Simulating Mouse Out on element 'xpath=//button[text()="Hide"]'.</msg>
<status status="PASS" starttime="20220905 14:27:36.035" endtime="20220905 14:27:36.581"/>
</kw>
<kw name="Get CSS Property Value" library="Generic">
<var>${actualColor}</var>
<arg>${element_xpath}</arg>
<arg>background-color</arg>
<doc>Get the CSS property value of an Element.</doc>
<kw name="Get WebElement" library="SeleniumLibrary">
<var>${css}</var>
<arg>locator=${locator}</arg>
<doc>Returns the first WebElement matching the given ``locator``.</doc>
<msg timestamp="20220905 14:27:36.591" level="INFO">${css} = &lt;selenium.webdriver.remote.webelement.WebElement (session="830d41478b856bbedc969fc25323a8f4", element="cbb5ed26-a82e-4028-b2b7-b7059c931eb9")&gt;</msg>
<status status="PASS" starttime="20220905 14:27:36.582" endtime="20220905 14:27:36.591"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<var>${prop_val}</var>
<arg>${css}</arg>
<arg>value_of_css_property</arg>
<arg>${attribute_name}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<msg timestamp="20220905 14:27:36.599" level="INFO">${prop_val} = rgba(0, 123, 255, 1)</msg>
<status status="PASS" starttime="20220905 14:27:36.591" endtime="20220905 14:27:36.599"/>
</kw>
<msg timestamp="20220905 14:27:36.599" level="INFO">${actualColor} = rgba(0, 123, 255, 1)</msg>
<status status="PASS" starttime="20220905 14:27:36.581" endtime="20220905 14:27:36.600"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>first=${expectedColor}</arg>
<arg>second=${actualColor}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220905 14:27:36.600" endtime="20220905 14:27:36.601"/>
</kw>
<status status="PASS" starttime="20220905 14:27:36.034" endtime="20220905 14:27:36.601"/>
</kw>
<kw name="Teardowns" type="TEARDOWN">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<arg>Capture Page Screenshot</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="PASS" starttime="20220905 14:27:36.601" endtime="20220905 14:27:36.601"/>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20220905 14:27:36.602" endtime="20220905 14:27:38.754"/>
</kw>
<status status="PASS" starttime="20220905 14:27:36.601" endtime="20220905 14:27:38.754"/>
</kw>
<tag>UI</tag>
<tag>Visibility</tag>
<status status="PASS" starttime="20220905 14:27:26.838" endtime="20220905 14:27:38.754"/>
</test>
<status status="PASS" starttime="20220905 14:27:26.613" endtime="20220905 14:27:38.755"/>
</suite>
<status status="PASS" starttime="20220905 14:27:26.589" endtime="20220905 14:27:38.756"/>
</suite>
<doc>[https://pabot.org/?ref=log|Pabot] result from 6 executions.</doc>
<status status="FAIL" starttime="20220905 14:27:26.563" endtime="20220905 14:27:38.756"/>
</suite>
<statistics>
<total>
<stat pass="15" fail="7" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="12" fail="7" skip="0">API</stat>
<stat pass="4" fail="3" skip="0">API_PET</stat>
<stat pass="3" fail="2" skip="0">API_STORE</stat>
<stat pass="5" fail="2" skip="0">API_USER</stat>
<stat pass="1" fail="0" skip="0">ClickFunction</stat>
<stat pass="1" fail="0" skip="0">TextVerify</stat>
<stat pass="3" fail="0" skip="0">UI</stat>
<stat pass="1" fail="0" skip="0">Visibility</stat>
</tag>
<suite>
<stat pass="15" fail="7" skip="0" id="s1" name="TestSuites">TestSuites</stat>
<stat pass="12" fail="7" skip="0" id="s1-s1" name="API Tests">TestSuites.API Tests</stat>
<stat pass="5" fail="2" skip="0" id="s1-s1-s1" name="TS001 API User">TestSuites.API Tests.TS001 API User</stat>
<stat pass="4" fail="3" skip="0" id="s1-s1-s2" name="TS002 API Pet">TestSuites.API Tests.TS002 API Pet</stat>
<stat pass="3" fail="2" skip="0" id="s1-s1-s3" name="TS003 API Store">TestSuites.API Tests.TS003 API Store</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="UI Tests">TestSuites.UI Tests</stat>
<stat pass="1" fail="0" skip="0" id="s1-s2-s1" name="TS001 UI Click">TestSuites.UI Tests.TS001 UI Click</stat>
<stat pass="1" fail="0" skip="0" id="s1-s2-s2" name="TS002 UI TextVerify">TestSuites.UI Tests.TS002 UI TextVerify</stat>
<stat pass="1" fail="0" skip="0" id="s1-s2-s3" name="TS003 UI Visibility">TestSuites.UI Tests.TS003 UI Visibility</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
